"vi":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "Chào mừng bạn đến với giờ học code đầu tiên! Hãy cùng tìm hiểu phần đầu tiên của việc lập trình nào."
      2:
        image: "notes/hoc1_2.jpg"
        text: "Chúng ta sẽ sử dụng Blockly, một ngôn ngữ lập trình trực quan nơi mà bạn kéo và thả những khối để viết dòng lệnh."
      3:
        image: "notes/hoc1_3.jpg"
        text: 'Hầu hết các dòng lệnh được đánh máy, nhưng Blockly thì trực quan hơn. Mỗi khối tương ứng với 1 dòng lệnh "thực sự".'
      4:
        image: "notes/hoc1_4.jpg"
        text: "Bạn sẽ học căn bản của khoa học máy tính, những khái niệm được sử dụng tại bất kì đâu từ tạo những ứng dụng cho đến điều khiển tàu thám hiểm sao Hỏa."
      5:
        image: "notes/hoc1_5.jpg"
        text: "Một chương trình là một tập hợp các chỉ dẫn cho máy tính của bạn làm theo."
      6:
        image: "notes/hoc1_6.jpg"
        text: "Mục tiêu của chương trình đầu tiên của bạn là lấy một Con Chim Đang Nổi Khùng ném qua một mê cung trúng vào một con Lợn Xanh Lá."
      7:
        image: "notes/hoc1_7.jpg"
        text: "Phía bên trái là mê cung nơi mà chương trình của bạn chạy. Những chỉ dẫn cho mỗi câu đố ở dưới mê cung."
      8:
        image: "notes/hoc1_8.jpg"
        text: "Hộp công cụ ở giữa có các dòng lệnh cho Con Chim Nổi Khùng. Bạn sẽ sử dụng chúng để xây dựng đoạn code của bạn."
      9:
        image: "notes/hoc1_9.jpg"
        text: "Ở bên phải là chỗ làm việc nơi mà bạn sẽ kéo từng khối từ hộp công cụ để xây dựng chương trình của bạn. Để xóa một khối, kéo nó vào thùng rác ở trong góc."
      10:
        image: "notes/hoc1_10.jpg"
        text: 'Mỗi khối là một chỉ dẫn. Nếu bạn kéo một khối "tiến lên" vào trong không gian làm việc và ấn "Chạy chương trình", con chim sẽ đi vào một khu vực trong mê cung.'
      11:
        image: "notes/hoc1_11.jpg"
        text: "Để làm nhiều hơn một hành động, bạn có thể kéo nhiều khối vào không gian làm việc và gắn chúng với nhau. Con chim sẽ thực hiện những dòng lệnh từ trên đến dưới."
      12:
        image: "notes/hoc1_12.jpg"
        text: 'Nếu bạn chạy một chương trình và muốn sửa nó và thử lại, ấn nút "Khởi động lại".'
      13:
        image: "notes/hoc1_13.jpg"
        text: "Tiếp tục với những con lợn nào!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Xin chào, tôi là JR! Mỗi đội xe đua cần các nhà khoa học về máy tính để giành chiến thắng. Họ phân tích dữ liệu từ xe để giúp nó đi nhanh hơn."
      2:
        image: "notes/stage5_2.jpg"
        text: "Trong loạt câu đố này, bạn là một họa sĩ vẽ những đường thẳng bên dưới chân bạn ở bất cứ nơi nào bạn đi qua."
      3:
        image: "notes/stage5_3.jpg"
        text: 'Khối lệnh này nói rằng "đi thẳng về phía trước 100 điểm ảnh." Điểm ảnh là những chấm nhỏ trên màn hình của bạn.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'Khối lệnh này nói rằng "rẽ phải 90 độ." Nó sẽ quay hướng họa sĩ của bạn giống như khối lệnh "quay" trong loạt câu đố mê cung.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Click on the arrow in either of these blocks to change the amount the artist moves forward or turns. Play around to get familiar with these new blocks."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Xin chào, tôi là Paola! Trong loạt câu đố này, bạn là một người nông dân đã san phẳng đất trên cánh đồng để bắt đầu trồng cây."
      2:
        image: "notes/stage9_2.jpg"
        text: "You have to help her remove all the piles of dirt and fill in all the holes."
      3:
        image: "notes/stage9_3.jpg"
        text: "The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shovelful of dirt to a hole."
      4:
        image: "notes/stage9_4.jpg"
        text: "The piles and holes are different sizes, so you have to tell the farmer how many shovelfuls to use."
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "Xin chào, tôi là Mark! Cùng tìm hiểu về vòng lặp nào. Sử dụng vòng lặp, bạn có thể nói với một cái máy tính lặp đi lặp lại bất kì tập hợp hành động nào, hàng nghìn hoặc thậm chí hàng tỉ lần."
      2:
        image: "notes/hoc2_2.jpg"
        text: "Trong câu đố này, chúng tôi muốn làm con chim tiến lên phía trước 5 đoạn để trúng vào con lợn."
      3:
        image: "notes/hoc2_3.jpg"
        text: 'Chúng ta có thể sử dụng khối "lặp" mới để giúp đỡ.'
      4:
        image: "notes/hoc2_4.jpg"
        text: 'Thay vì kéo ra 5 khối "tiến lên phía trước"...'
      5:
        image: "notes/hoc2_5.jpg"
        text: 'We can put the "move forward" block inside the "repeat" block and write a number in the block to tell it how many times to repeat.'
      6:
        image: "notes/hoc2_6.jpg"
        text: 'And this is important: you can put more than one command inside a "repeat" block.'
      7:
        image: "notes/hoc2_7.jpg"
        text: 'Enjoy using your new "repeat" block!'
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: |-
          Hi, I'm Chris. Before joining the Miami Heat, I went to Georgia Tech to study Computer Science. Let's try our new block, the "repeat until" block.
      2:
        image: "notes/hoc3_2.jpg"
        text: "What if we didn't know how far the bird had to move to get to the pig?"
      3:
        image: "notes/hoc3_3.jpg"
        text: 'If we put a "move forward" block inside the "repeat until" block, the bird will move forward UNTIL it reaches the pig (or crashes into a wall).'
      4:
        image: "notes/hoc3_4.jpg"
        text: 'And this is important: just like before, we can put multiple blocks inside the "repeat until" block, and they will all be repeated.'
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: |-
          Hi, I'm Bill! Let's learn a new fundamental concept: "If" statements. This is how computers make decisions.
      2:
        image: "notes/hoc4_2.jpg"
        text: |-
          You use "If" statements yourself everday. Before you go outside each morning, you say IF it's raining outside, I need to wear my jacket.
      3:
        image: "notes/hoc4_3.jpg"
        text: "We can tell the zombie to check IF there's path to the left, and if he finds a path to the left, we can have him turn in that direction."
      4:
        image: "notes/hoc4_4.jpg"
        text: |-
          To write the code for this, let's drag out our "if" block and put a "turn left" block inside it.
      5:
        image: "notes/hoc4_5.jpg"
        text: |-
          Now, if we put a "move forward" block above it and a "repeat" block around everything, each time the zombie moves, he'll check if there's a path to the left and turn. The "repeat" command is critical, to check for a turn at every step.
      6:
        image: "notes/hoc4_6.jpg"
        text: "If statements are really important in computer science. One of the first programs I wrote was a tic-tac-toe game, and there was a If statement that said IF the other person is about to win, block the spot that lets them win."
      7:
        image: "notes/hoc4_7.jpg"
        text: 'Have fun using the "if" block!'
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: "notes/hoc5_2.jpg"
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: "notes/hoc5_3.jpg"
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: "notes/hoc5_4.jpg"
        text: "Now, get those zombies where they belong!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: "notes/stage13_2.jpg"
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: "notes/stage13_3.jpg"
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5" function block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: "notes/stage9_6.jpg"
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statement on the top is TRUE.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shovelful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hi, I 'm Trina, và tôi làm việc cho Pixar. Tôi đã làm việc trên một loạt các phim, trong đó có Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, tôi là Janete, và tôi là một kỹ sư tại Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: "notes/hoc6_2.jpg"
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: "notes/hoc6_3.jpg"
        text: "If you liked your first hour of code, visit code.org to continue your education into computer science! Once you complete our 20 hour course, you'll have mastered the basics of programming, and can start learning how to write phone apps, robot instructions, games, you name it."
      4:
        image: "notes/hoc6_4.jpg"
        text: "Technology is changing everything we do and it doesn't matter if you're young or old: programming is fun, it's creative, and anyone can learn!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Show notes coming soon!"
