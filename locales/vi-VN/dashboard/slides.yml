"vi":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.png
        text: Chào mừng bạn đến với giờ học code đầu tiên! Hãy cùng tìm hiểu phần đầu tiên của việc lập trình nào.
      2:
        image: notes/hoc1_2.png
        text: Chúng ta sẽ sử dụng Blockly, một ngôn ngữ lập trình trực quan nơi mà bạn kéo và thả những khối để viết dòng lệnh.
      3:
        image: notes/hoc1_3.png
        text: Hầu hết các dòng lệnh được đánh máy, nhưng Blockly thì trực quan hơn. Mỗi khối tương ứng với 1 dòng lệnh "thực sự".
      4:
        image: notes/hoc1_4.png
        text: Bạn sẽ học căn bản của khoa học máy tính, những khái niệm được sử dụng tại bất kì đâu từ tạo những ứng dụng cho đến điều khiển tàu thám hiểm sao Hỏa.
      5:
        image: notes/hoc1_5.png
        text: Một chương trình là một tập hợp các chỉ dẫn cho máy tính của bạn làm theo.
      6:
        image: notes/hoc1_6.png
        text: Mục tiêu của chương trình đầu tiên của bạn là lấy một Con Chim Đang Nổi Khùng ném qua một mê cung trúng vào một con Lợn Xanh Lá.
      7:
        image: notes/hoc1_7.png
        text: Phía bên trái là mê cung nơi mà chương trình của bạn chạy. Những chỉ dẫn cho mỗi câu đố ở dưới mê cung.
      8:
        image: notes/hoc1_8.png
        text: Hộp công cụ ở giữa có các dòng lệnh cho Con Chim Nổi Khùng. Bạn sẽ sử dụng chúng để xây dựng đoạn code của bạn.
      9:
        image: notes/hoc1_9.png
        text: Ở bên phải là chỗ làm việc nơi mà bạn sẽ kéo từng khối từ hộp công cụ để xây dựng chương trình của bạn. Để xóa một khối, kéo nó vào thùng rác ở trong góc.
      10:
        image: notes/hoc1_10.png
        text: Mỗi khối là một chỉ dẫn. Nếu bạn kéo một khối "tiến lên" vào trong không gian làm việc và ấn "Chạy chương trình", con chim sẽ đi vào một khu vực trong mê cung.
      11:
        image: notes/hoc1_11.png
        text: Để làm nhiều hơn một hành động, bạn có thể kéo nhiều khối vào không gian làm việc và gắn chúng với nhau. Con chim sẽ thực hiện những dòng lệnh từ trên đến dưới.
      12:
        image: notes/hoc1_12.png
        text: Nếu bạn chạy một chương trình và muốn sửa nó và thử lại, ấn nút "Khởi động lại".
      13:
        image: notes/hoc1_13.png
        text: Tiếp tục với những con lợn nào!
    artist_intro:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
    farmer_intro:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
    loop_times:
      1:
        image: notes/hoc2_1.png
        text: Xin chào, tôi là Mark! Cùng tìm hiểu về vòng lặp nào. Sử dụng vòng lặp, bạn có thể nói với một cái máy tính lặp đi lặp lại bất kì tập hợp hành động nào, hàng nghìn hoặc thậm chí hàng tỉ lần.
      2:
        image: notes/hoc2_2.png
        text: Trong câu đố này, chúng tôi muốn làm con chim tiến lên phía trước 5 đoạn để trúng vào con lợn.
      3:
        image: notes/hoc2_3.png
        text: Chúng ta có thể sử dụng khối "lặp" mới để giúp đỡ.
      4:
        image: notes/hoc2_4.png
        text: Thay vì kéo ra 5 khối "tiến lên phía trước"...
      5:
        image: notes/hoc2_5.png
        text: We can put the "move forward" block inside the "repeat" block and write a number in the block to tell it how many times to repeat.
      6:
        image: notes/hoc2_6.png
        text: 'And this is important: you can put more than one command inside a "repeat" block.'
      7:
        image: notes/hoc2_7.png
        text: Enjoy using your new "repeat" block!
    loop_until:
      1:
        image: notes/hoc3_1.png
        text: |-
          Hi, I'm Chris. Before joining the Miami Heat, I went to Georgia Tech to study Computer Science. Let's try our new block, the "repeat until" block.
      2:
        image: notes/hoc3_2.png
        text: "What if we didn't know how far the bird had to move to get to the pig?"
      3:
        image: notes/hoc3_3.png
        text: If we put a "move forward" block inside the "repeat until" block, the bird will move forward UNTIL it reaches the pig (or crashes into a wall).
      4:
        image: notes/hoc3_4.png
        text: 'And this is important: ;just like before, we can put multiple blocks inside the "repeat until" block, and they will all be repeated.'
    if:
      1:
        image: notes/hoc4_1.png
        text: |-
          Hi, I'm Bill! Let's learn a new fundamental concept: "If" statements. This is how computers make decisions.
      2:
        image: notes/hoc4_2.png
        text: |-
          You use "If" statments yoruself everday. Before you go outside each morning, you say IF it's raining outside, I need to wear my jacket.
      3:
        image: notes/hoc4_3.png
        text: "We can tell the zombie to check IF there's path to the left, and if he finds a path to the left, we can have him turn in that direction."
      4:
        image: notes/hoc4_4.png
        text: |-
          To write the code for this, let's drag out our "if" block and put a "turn left" block inside it.
      5:
        image: notes/hoc4_5.png
        text: |-
          Now, if we put a "move forward" block above it and a "repeat" block around everything, each time the zombie moves, he'll check if there's a path to the left and turn. The "repeat" command is critical, to check for a turn at every step.
      6:
        image: notes/hoc4_6.png
        text: If statements are really important in computer science. One of the first programs I wrote was a tic-tac-toe game, and there was a If statement that said IF the other person is about to win, block the spot that lets them win.
      7:
        image: notes/hoc4_7.png
        text: Have fun using the "if" block!
    if_else:
      1:
        image: notes/hoc5_1.png
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.png
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.png
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.png
        text: Now, get those zombies where they belong!
    function:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
    loop_while:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
    loop_for:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
    parameters:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
    hoc_wrapup:
      1:
        image: notes/hoc6_1.png
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: notes/hoc6_2.png
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: notes/hoc6_3.png
        text: "If you liked your first hour of code, visit code.org to continue your education into computer science! Once you complete our 20 hour course, you'll have mastered the basics of programming, and can start learning how to write phone apps, robot instructions, games, you name it."
      4:
        image: notes/hoc6_4.png
        text: "Technology is changing everything we do and it doesn't matter if you're young or old: programming is fun, it's creative, and anyone can learn!"
    20_wrapup:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
