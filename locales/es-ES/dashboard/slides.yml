"es-ES":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "¡Bienvenido a tu primer hora de código! Vamos a sumergirnos bien en tu primera experiencia de programación."
      2:
        image: "notes/hoc1_2.jpg"
        text: "Usaremos Blockly, un lenguaje de programación visual donde puedes arrastrar y soltar bloques para escribir código."
      3:
        image: "notes/hoc1_3.jpg"
        text: 'La mayoría del código se escribe a mano, en cambio Blockly es visual. Cada bloque corresponde a una línea de código "real".'
      4:
        image: "notes/hoc1_4.jpg"
        text: "Aprenderás los fundamentos de la informática, los conceptos que se utilizan en cualquier lugar, desde hacer aplicaciones hasta controlar el Mars rover."
      5:
        image: "notes/hoc1_5.jpg"
        text: "Un programa es un conjunto de instrucciones que tu ordenador sigue."
      6:
        image: "notes/hoc1_6.jpg"
        text: "El objetivo de tu primer programa es guiar un Angry Bird a través de un laberinto para golpear al cerdo verde."
      7:
        image: "notes/hoc1_7.jpg"
        text: "El lado izquierdo es el laberinto donde se ejecuta tu programa. Las instrucciones para cada rompecabezas están debajo del laberinto."
      8:
        image: "notes/hoc1_8.jpg"
        text: "La barra de herramientas del medio contiene los comandos para el Angry Bird. Puedes usarlos para construir tu código."
      9:
        image: "notes/hoc1_9.jpg"
        text: "A la derecha está tu área de trabajo donde podrás arrastrar los bloques del cuadro de herramientas para construir tu programa. Para eliminar un bloque, arrástralo a la papelera que se encuentra en la esquina."
      10:
        image: "notes/hoc1_10.jpg"
        text: 'Cada bloque es una instrucción. Si arrastras el bloque "avanzar" a tu espacio de trabajo y oprimes el botón "Ejecutar Programa", el pájaro se mueve una casilla en el laberinto.'
      11:
        image: "notes/hoc1_11.jpg"
        text: "Para hacer más de una acción, puedes arrastrar muchos bloque a tu espacio de trabajo y unirlos. El pájaro ejecutará los comandos de arriba hacia abajo."
      12:
        image: "notes/hoc1_12.jpg"
        text: 'Si ejecutas un programa y quieres arreglarlo e intentar de nuevo, presiona el botón "Reiniciar".'
      13:
        image: "notes/hoc1_13.jpg"
        text: "¡Vamos por esos cerdos!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Hi, I'm JR! Every race car team need computer scientists to win. They analyze data from the car to make it go faster."
      2:
        image: "notes/stage5_2.jpg"
        text: "In these puzzles, you'll be an artist that draws a line behind them everywhere they go."
      3:
        image: "notes/stage5_3.jpg"
        text: 'This block says "move forward by 100 pixels." Pixels are just really tiny dots on your screen.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'This block says "turn right by 90 degrees." This will turn your artist the same amount as the "turn" blocks in the maze puzzles.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Click on the arrow in either of these blocks to change the amount the artist moves forward or turns. Play around to get familiar with these new blocks."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Hi, I'm Paola! In these puzzles, you're a farmer who has to get her field completely flat to start planting crops."
      2:
        image: "notes/stage9_2.jpg"
        text: "You have to help her remove all the piles of dirt and fill in all the holes."
      3:
        image: "notes/stage9_3.jpg"
        text: "The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shoveful of dirt to a hole."
      4:
        image: "notes/stage9_4.jpg"
        text: "The piles and holes are different sizes, so you have to tell the farmer how many shovelfuls to use."
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "Hola, soy Mark! Aprendamos acerca de las iteraciones. Usando iteraciones puedes decirle a una computadora que repita una y otra vez cualquier conjunto de acciones, miles o incluso millones de veces."
      2:
        image: "notes/hoc2_2.jpg"
        text: "En este puzzle, queremos que el pájaro se mueva hacia adelante 5 espacios para llegar al cerdo."
      3:
        image: "notes/hoc2_3.jpg"
        text: 'Podemos usar el nuevo bloque "repetir" para ayudarnos.'
      4:
        image: "notes/hoc2_4.jpg"
        text: 'En lugar arrastrar 5 bloques "avanzar"...'
      5:
        image: "notes/hoc2_5.jpg"
        text: 'Podemos poner el bloque "avanzar" dentro del bloque "repetir" y escribir un número en el bloque para decirle cuántas veces debe repetirse.'
      6:
        image: "notes/hoc2_6.jpg"
        text: 'Y esto es importante: puedes poner más de un comando dentro de un bloque "repetir".'
      7:
        image: "notes/hoc2_7.jpg"
        text: '¡Disfruta usando tu nuevo bloque "repetir"!'
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: 'Hola, soy Chris. Antes de unirme a los Miami Heat, fui a Georgia Tech a estudiar Ciencias de la Computación. Vamos a probar nuestro nuevo bloque, el bloque "repetir hasta".'
      2:
        image: "notes/hoc3_2.jpg"
        text: "¿Qué sucedería si no supiéramos cuanto debería moverse el pájaro para llegar al cerdo?"
      3:
        image: "notes/hoc3_3.jpg"
        text: 'Si ponemos un bloque "avanzar" dentro del bloque "repetir hasta" , el pájaro avanzará HASTA que alcance al cerdo (o choque con una pared).'
      4:
        image: "notes/hoc3_4.jpg"
        text: 'Y esto es importante; así como antes, podemos poner múltiples bloques dentro del bloque "repetir hasta" y todo ello se repetirá.'
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: '¡Hola, soy Bill! Aprendamos un nuevo concepto fundamental: las declaraciones "si". A través de ellas las computadoras toman decisiones.'
      2:
        image: "notes/hoc4_2.jpg"
        text: 'Tu mismo usas declaraciones "sí", "If", diariamente.  Antes de salir afuera cada mañana, dices "sí", "IF", lloviera afuera, yo me pondría una chubasquero.'
      3:
        image: "notes/hoc4_3.jpg"
        text: "Podemos decirle al zombie que compruebe si hay un camino a la izquierda, y si encuentra un camino a la izquierda, podemos hacerlo girar en esa dirección."
      4:
        image: "notes/hoc4_4.jpg"
        text: 'Para escribir el código para esto, vamos a sacar nuestro bloque "si" y colocaremos un bloque "gira a la izquierda" en su interior.'
      5:
        image: "notes/hoc4_5.jpg"
        text: 'Ahora, si ponemos un bloque "avanzar" encima de este, y un bloque "repetir" alrededor de todo, cada vez que el zombie se mueva, el comprobará si hay un camino a la izquierda y girará. El comando "repetir" es crítico, para comprobar si tiene que girar en cada paso.'
      6:
        image: "notes/hoc4_6.jpg"
        text: 'Las declaraciones "si" son muy importantes en las ciencias de la computación. Uno de los primeros programas que escribí era un juego de tic-tac-toe, y había una declaración "Si" que decía que si la otra persona está a punto de ganar, bloquea el lugar que le permite ganar.'
      7:
        image: "notes/hoc4_7.jpg"
        text: '¡Diviértete cuando uses el bloque "if" (si)!'
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: 'Hola, mi nombre es Saloni. Yo uso la informática para ayudar a resolver problema de salud y medicina. Vamos a aprender acerca del bloque "si otro". Se parece al bloque "si", pero tiene una parte extra al fina que dice "otro".'
      2:
        image: "notes/hoc5_2.jpg"
        text: 'Si pongo el bloque "avanzar" en el lugar donde dice "hacer" y un bloque "girar a la izquierda" donde dice "otro" significa que el zombie va a elegir entre dos opciones. Si hay un camino adelante, el zombie va a avanzar, y SINO (no hay un camino adelante), el zombie va a girar hacia la izquierda.'
      3:
        image: "notes/hoc5_3.jpg"
        text: 'Al igual que el bloque "if", podemos poner bloques "si si no" dentro de un bloque "repetir" para que el zombie siga moviéndose y el bloque "si entonces" continuará comprobando si hay un lugar para girar.'
      4:
        image: "notes/hoc5_4.jpg"
        text: "Ahora, llevemos a esos zombies donde pertenecen!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: "notes/stage13_2.jpg"
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: "notes/stage13_3.jpg"
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5 function" block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!" 
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block." 
      2:
        image: "notes/stage9_6.jpg"
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statment on the top is TRUE.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shoveful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "¡Felicidades! Con el último puzzle resuelto, acabas de escribir código que puede decir a cualquier robot cómo encontrar su camino a través de un laberinto sin ramificación o túnel de cualquier longitud, no importa si es un zombie, un pájaro, un rover de Marte o incluso un coche sin conductor."
      2:
        image: "notes/hoc6_2.jpg"
        text: 'Los conceptos básicos que utilizaste son el corazón de cualquier programa o aplicación que encuentres.  Aprendimos acerca de iteraciones, las declaraciones "repetir hasta", las declaraciones "si" y las "si sí no".'
      3:
        image: "notes/hoc6_3.jpg"
        text: "Si te gustó tu primera hora del código, visita code.org para continuar tu educación en Ciencias de la Computación. Una vez que completes nuestro curso de 20 horas, habrás dominado los fundamentos de la programación y podrás empezar a aprender cómo escribir aplicaciones para teléfonos, instrucciones para robots, juegos, o lo que quieras."
      4:
        image: "notes/hoc6_4.jpg"
        text: "La tecnología está cambiando todo lo que hacemos y no importa si eres joven o viejo: la programación es divertida, es creativa, y cualquier persona puede aprenderla!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "¡Mostrar notas estará disponible pronto!"
