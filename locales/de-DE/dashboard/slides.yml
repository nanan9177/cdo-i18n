"de":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.png
        text: Willkommen zu deiner ersten Programmierstunde! Fangen wir gleich mit der ersten Übung an.
      2:
        image: notes/hoc1_2.png
        text: "Wir werden Blocky, eine Grafische Programmiersprache in der du mit Drag & Drop Bausteine setzt, benutzen um Code zu schreiben."
      3:
        image: notes/hoc1_3.png
        text: Meistens wird Code geschrieben, aber Blockly ist grafisch. Jeder Baustein entspricht einer Zeile "echten" Codes.
      4:
        image: notes/hoc1_4.png
        text: Du wirst die Grundlagen der Informatik lernen. Konzepte die überall genutzt werden, von erstellen von Apps bis zum Kontrollieren des Mars Rovers.
      5:
        image: notes/hoc1_5.png
        text: Ein Programm ist eine Ansammlung von Anweisungen, die dein Computer befolgt.
      6:
        image: notes/hoc1_6.png
        text: Das Ziel deines ersten Programmes ist es Angry Bird durch ein Laybrinth zum grünen Schwein zu führen.
      7:
        image: notes/hoc1_7.png
        text: Die linke Seite ist das Labybrinth wo dein Programm ausgeführt wird. Die Anweisungen für jedes Puzzle findest du unter dem Laybrinth.
      8:
        image: notes/hoc1_8.png
        text: Der mittlere Werkzeugkasten enthält die Befehlsbausteine für den Vogel. Verwende sie, um das Programm zu erstellen.
      9:
        image: notes/hoc1_9.png
        text: Rechts ist der Arbeitsbereich, wo die Bausteine aus dem Werkzeugkasten zum Programm zusammengesteckt werden. Um einen Block zu löschen, ziehe ihn in den Papierkorb in der Ecke.
      10:
        image: notes/hoc1_10.png
        text: Jeder Baustein ist eine Anweisung. Wenn du einen "move forward"-Baustein auf deinen Arbeitsbereich ziehst und anschließend "Run Programm" drückst, dann bewegt sich der Vogel im Labyrinth einen Schritt nach vorne.
      11:
        image: notes/hoc1_11.png
        text: Um mehr als eine Aktion zu tun, kannst du viele Bausteine in den Arbeitsbereich ziehen und sie zusammenstecken. Der Vogel wird die Befehle von oben nach unten abarbeiten.
      12:
        image: notes/hoc1_12.png
        text: Wenn Du ein Programm reparieren und es nochmals versuchen möchtest, dann drücke den "Reset" Knopf.
      13:
        image: notes/hoc1_13.png
        text: Holen wir die Schweine!
    artist_intro:
      1:
        image: notes/bird.png
        text: Zeige Notizen kommt bald!
    farmer_intro:
      1:
        image: notes/bird.png
        text: Zeige Notizen kommt bald!
    loop_times:
      1:
        image: notes/hoc2_1.png
        text: Hi, ich bin Mark! Lass uns etwas über Schleifen lernen. Wenn Du Schleifen verwendest, kannst du dem Computer befehlen, dass er jede beliebige Anweisung wieder und wieder, tausendmal oder sogar milliardenmal, wiederholen soll.
      2:
        image: notes/hoc2_2.png
        text: In diesem Puzzle möchten wir, dass sich der Vogel 5 Schritte nach vorne zum Schwein bewegt.
      3:
        image: notes/hoc2_3.png
        text: Wir können den neuen "Wiederholen/Repeat"-Block verwenden, um uns zu helfen.
      4:
        image: notes/hoc2_4.png
        text: Anstatt 5 Bausteine "vorwärts gehen/move forward" zu stapeln...
      5:
        image: notes/hoc2_5.png
        text: können wir den "gehe vorwärts/move forward"-Baustein in einen "Wiederhole"-Block ziehen und eine Zahl im Baustein angeben, wie oft es wiederholt werden soll.
      6:
        image: notes/hoc2_6.png
        text: 'Und wichtig: Man kann mehr als einen Bausteinen in einen "Wiederholen/Repeat"-Block packen.'
      7:
        image: notes/hoc2_7.png
        text: Viel Spaß mit deinem neuen "repeat" Baustein!
    loop_until:
      1:
        image: notes/hoc3_1.png
        text: Hi, ich bin Chris. Bevor ich angefangen habe Basketball für das Team "Miami Heat" zu spielen, habe ich an der "Georgia Tech"-Universität Informatik studiert. Lass uns den neuen "repeat until"-Baustein ausprobieren.
      2:
        image: notes/hoc3_2.png
        text: Was wäre wenn wir nicht wüssten, wie weit sich der Vogel bewegen muss, um zum Schwein zu kommen?
      3:
        image: notes/hoc3_3.png
        text: Wenn wir einen "move forward"-Baustein in den "repeat unti"-Baustein setzten, wird sich der Vogel nach vorne bewegen BIS er bei einem Schwein ankommt (oder in eine Wand kracht).
      4:
        image: notes/hoc3_4.png
        text: 'And this is important: ;just like before, we can put multiple blocks inside the "repeat until" block, and they will all be repeated.'
    if:
      1:
        image: notes/hoc4_1.png
        text: 'Hi, ich bin Bill! Lass uns ein neues, fundamentales Konzept lernen: Die "If"-Anweisungen. Damit trifft der Computer Entscheidungen.'
      2:
        image: notes/hoc4_2.png
        text: 'Du selbst verwendest "If"-Anweisungen täglich. Bevor du am Morgen nach draußen gehst, sagst du zu dir: WENN es draußen regnet, muss ich meine Jacke anziehen.'
      3:
        image: notes/hoc4_3.png
        text: Wir können den Zombie anweisen zu überprüfen WENN es einen Weg nach links gibt und wenn er einen Weg nach links findet, dass er sich in diese Richtung drehen soll.
      4:
        image: notes/hoc4_4.png
        text: Um den Code für das zu schreiben, ziehe zuerst unseren "if"-Baustein heraus und setze danach einen "turn left"-Baustein hinein.
      5:
        image: notes/hoc4_5.png
        text: Wenn wir jetzt einen "gehe vorwärts/move Forward"-Baustein darüber stapeln und um alles einen "Wiederhole/Repeat"-Baustein legen, wird der Zombie bei jeder Bewegung prüfen, ob es einen Weg nach links gibt und sich in dem Fall drehen. Der "Wiederhole/Repeat"-Befehl ist wichtig, um bei jedem Schritt auf eine Drehmöglichkeit zu prüfen.
      6:
        image: notes/hoc4_6.png
        text: Wenn-dann-Befehle sind in der Informatik wirklich wichtig sind. Eines meiner ersten Programme war Tic Tac Toe, und es gab eine Wenn-dann-Anweisung, die sagte, wenn die andere Person gewinnen sollte, blockiere das Feld, mit dem sie gewinnen kann.
      7:
        image: notes/hoc4_7.png
        text: Viel Spaß mit dem "if"-Baustein!
    if_else:
      1:
        image: notes/hoc5_1.png
        text: 'Hi, ich heiße Saloni. Ich verwende Informatik um Probleme im Gesundheits- und Medizinbereich zu lösen. Lass uns etwas über den "if else"-Baustein lernen. Er sieht ähnlich wie ein "if"-Baustein aus, aber er hat einen Zusatzteil am Ende, das "else" heißt.'
      2:
        image: notes/hoc5_2.png
        text: 'Wenn ich einen "gehe vorwärts/move forward"-Baustein, an der Stelle, wo es heißt "tun", und eine "drehe links/turn left"-Baustein, wo es heißt "sonst", setzte, kann der Zombie zwischen 2 Optionen wählen. Gibt es einen Weg geradeaus, bewegt sich der Zombie vorwärts.  Gibt es ist keinen Weg geradeaus, dreht sich der Zombie nach links.'
      3:
        image: notes/hoc5_3.png
        text: Genau wie einen "Wenn/If"-Baustein, können wir einen "Wenn-sonst/If else"-Baustein in einen "Wiederhole/Repeat"-Baustein setzen, so dass der Zombie sich weiter bewegt und der "Wenn-sonst/If else"-Baustein prüft, ob es einen Weg zum Drehen gibt.
      4:
        image: notes/hoc5_4.png
        text: Jetzt bewege die Zombies dahin, wo sie hingehören!
    function:
      1:
        image: notes/bird.png
        text: Zeige Notizen kommt bald!
    loop_while:
      1:
        image: notes/bird.png
        text: Zeige Notizen kommt bald!
    loop_for:
      1:
        image: notes/bird.png
        text: Zeige Notizen kommt bald!
    parameters:
      1:
        image: notes/bird.png
        text: Zeige Notizen kommt bald!
    hoc_wrapup:
      1:
        image: notes/hoc6_1.png
        text: Herzlichen Glückwunsch! Mit dem letzten Rätsel, das Du gerade gelöst hast, hast Du Code geschrieben, den JEDEN Roboter dazu verwenden kann, um seinen Weg durch nicht-verzweigte Labyrinthe oder Tunnel aller Längen zu finden. Ganz egal ob es ein Zombie, ein Vogel, ein Mars-Rover, oder sogar ein selbstfahrendes Auto ist.
      2:
        image: notes/hoc6_2.png
        text: Die grundlegenden Konzepte, die du verwendet hast, sind das Herzstück jedes Programm oder App. Wir haben etwas über Schleifen, Wiederholungen, Wenn-Dann-Befehle und Wenn-Dann-Sonst gelernt.
      3:
        image: notes/hoc6_3.png
        text: Wenn Dir die ersten Stunden Programmieren gefallen haben, dann besuche code.org, um Deine Ausbildung in der Informatik fortzuführen! Sobald Du unseren 20 Stunden-Kurs abgeschlossen hast, hast Du die Grundlagen des Programmieren gemeistert und kannst anfangen zu lernen wie man Handy-Apps, Roboter-Anweisungen, Spiele, oder was immer Du möchtest, programmiert.
      4:
        image: notes/hoc6_4.png
        text: "Technologie verändert alles was wir tun und es ist egal ob du jung oder alt bist: Programmieren macht Spaß, es ist kreativ, und jeder kann es lernen!"
    20_wrapup:
      1:
        image: notes/bird.png
        text: Zeige Notizen kommt bald!
