"da":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "Velkommen til din første times kodning! Lad os dykke direkte ind i din første smagsprøve af programmeringen."
      2:
        image: "notes/hoc1_2.jpg"
        text: "Vi vil bruge Blockly, et visuel programmeringssprog hvor du trækker og slipper blokke for at skrive kode."
      3:
        image: "notes/hoc1_3.jpg"
        text: 'Det meste kode er indtastet, men Blockly er visuel. Hver blok svarer til en "rigtig" kodelinje.'
      4:
        image: "notes/hoc1_4.jpg"
        text: "Du vil lære grundprincipperne for computer videnskab, begreber der anvendes overalt fra at lave apps til at kontrollere Mars Rover."
      5:
        image: "notes/hoc1_5.jpg"
        text: "Et program er et sæt af instruktioner som din computer kan følge."
      6:
        image: "notes/hoc1_6.jpg"
        text: "Målet med dit første program er at få en Angry Bird gennem en labyrint og ramme en grøn gris."
      7:
        image: "notes/hoc1_7.jpg"
        text: "Venstre side er labyrinten, hvor programmet køres. Instruktionerne for hver gåde er under labyrinten."
      8:
        image: "notes/hoc1_8.jpg"
        text: "Den midterste værktøjskasse har kommandoerne for Angry Bird'en. Du skal bruge disse til at bygge din kode."
      9:
        image: "notes/hoc1_9.jpg"
        text: "Til højre er dit arbejdsområde, hvor du kan trække blokke fra værktøjskasse til at bygge dit program. Hvis du vil slette en blok, skal du trække den til papirkurven i hjørnet."
      10:
        image: "notes/hoc1_10.jpg"
        text: |-
          Hver blok er en instruktion. Hvis du trækker en "gå videre" blok til dit arbejdsområde og tryk på "Kør Program", bevæger Angry Bird'en sig en plads frem i labyrinten.
      11:
        image: "notes/hoc1_11.jpg"
        text: "For at gøre mere end én handling, kan du trække mange blokke til dit arbejdsområde og lægge dem sammen. Angry Bird'en vil udføre kommandoerne fra top til bund."
      12:
        image: "notes/hoc1_12.jpg"
        text: 'Hvis du kører et program og ønsker at ændre det og prøve igen, skal du trykke på knappen "Nulstil".'
      13:
        image: "notes/hoc1_13.jpg"
        text: "Lad os så ordne de grise!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Hej, jeg er JR! Ethvert racer bils team har brug for computer eksperter for at vinde. De analyserer data fra bilen for at få den til at køre hurtigere."
      2:
        image: "notes/stage5_2.jpg"
        text: "I disse gåder, vil du være en kunstner, der tegner en linje bag dem overalt de går."
      3:
        image: "notes/stage5_3.jpg"
        text: 'Denne blok siger "Flyt fremad med 100 pixel." Pixels er bare virkelig små prikker på din skærm.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'Denne blok siger "Drej 90 grader til højre." Dette vil dreje din kunstner, på samme måde som "drej" blokken i labyrint gåderne.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Klik på pilen i en af disse blokke for at ændre hvor meget kunstneren bevæger sig fremad eller vender. Leg med det for at blive fortrolig med disse nye blokke."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Hej, jeg er Paola! I disse gåder er du en landmand, der skal få hendes område helt fladt, så der kan plantes afgrøder."
      2:
        image: "notes/stage9_2.jpg"
        text: "Du skal hjælpe hende med at fjerne alle bunker af snavs og udfylde alle hullerne."
      3:
        image: "notes/stage9_3.jpg"
        text: "De nye blokke fjerner 1 skovlfuld snavs fra en bunke og fylder 1 skovlfuld snavs i et hul."
      4:
        image: "notes/stage9_4.jpg"
        text: "Bunkerne og hullerne er forskellige størrelser, så du skal fortælle landmanden hvor mange skovlfulde der skal bruges."
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "Hej, jeg er Mark! Lad os lære om loops. Ved hjælp af loops kan du fortælle en computer at den skal gentage et sæt af handlinger, igen og igen, tusinder eller endda milliarder af gange."
      2:
        image: "notes/hoc2_2.jpg"
        text: "I denne gåde ønsker vi at få fuglen til at flytte fremad 5 skridt for at komme til grisen."
      3:
        image: "notes/hoc2_3.jpg"
        text: 'Vi kan bruge den nye "gentage" blok til at hjælpe os.'
      4:
        image: "notes/hoc2_4.jpg"
        text: 'I stedet for at trække 5 "Flyt fremad" blokke ud...'
      5:
        image: "notes/hoc2_5.jpg"
        text: 'Kan vi sætte "Flyt fremad" blokken ind i "gentag" blokken og skrive et tal i blokken for at fortælle hvor mange gange det skal gentages.'
      6:
        image: "notes/hoc2_6.jpg"
        text: 'Og dette er vigtigt: du kan sætte mere end én kommando ind i en "gentag" blok.'
      7:
        image: "notes/hoc2_7.jpg"
        text: 'God fornøjelse med at bruge din nye "gentag" blok!'
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: 'Hej, jeg er Chris. Før jeg kom til Miami Heat, gik jeg på Georgia Tech og studerede Computer Videnskab. Lad os prøve vores nye blok, "gentag indtil" blokken.'
      2:
        image: "notes/hoc3_2.jpg"
        text: "Hvad hvis vi vidste ikke hvor langt Angry Bird'en var nødt til at flytte for at komme til grisen?"
      3:
        image: "notes/hoc3_3.jpg"
        text: |-
          Hvis vi sætter en "Flyt fremad" blok inden i "Gentag indtil"-blokken, så vil Angry Bird'en bevæge sig fremad indtil den når til grisen (eller styrter ind i en væg).
      4:
        image: "notes/hoc3_4.jpg"
        text: 'Og dette er vigtigt: ligesom før, vi kan sætte flere blokke inden i "gentag indtil" blokken, og de vil alle blive gentaget.'
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: 'Hej, jeg hedder Bill! Lad os lære et ny grundlæggende begreb: "hvis"-sætninger. Dette er, hvordan computere træffer beslutninger.'
      2:
        image: "notes/hoc4_2.jpg"
        text: 'Du bruger "hvis"-sætninger selv hver dag. Før du går udenfor hver morgen, siger du, HVIS det regner udenfor, så har jeg brug for at tage min jakke på.'
      3:
        image: "notes/hoc4_3.jpg"
        text: "Vi kan bede zombien kontrollere, om der er en sti til venstre, og hvis han finder en sti til venstre, kan vi få ham til at dreje i retningen."
      4:
        image: "notes/hoc4_4.jpg"
        text: 'For at skrive koden til dette, lad os trække vores "hvis" blok ud og sætte en "venstresving" blok inde i den.'
      5:
        image: "notes/hoc4_5.jpg"
        text: 'Nu, hvis vi sætter en "gå frem" blok over det og en "gentag" blok omkring alt, så hver gang zombien bevæger sig, vil han kontrollere, om der er en vej til venstre og dreje. Kommandoen "Gentag" er kritisk, for at kontrollere om der skal drejes for hvert skridt.'
      6:
        image: "notes/hoc4_6.jpg"
        text: "Hvis-sætninger er rigtigt vigtige i computer videnskab. En af de første programmer jeg skrev var et kryds og bolle spil, og der var en hvis-sætning, der sagde, at hvis den anden person er ved at vinde, blokere den plads, der lader dem vinde."
      7:
        image: "notes/hoc4_7.jpg"
        text: 'God fornøjelse med at bruge "hvis" blokken!'
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: 'Hej, mit navn er Saloni. Jeg bruger computer videnskab til at løse problemer inden for sundhed og medicin. Lad os lære om den "hvis ellers" blok. Det ligner "hvis"-blokken, men det har en ekstra del i slutningen, der siger "ellers".'
      2:
        image: "notes/hoc5_2.jpg"
        text: 'Hvis jeg sætte en "gå fremad" blok på stedet hvor der står "udfør" og en "Drej til venstre" blok hvor der står "ellers" betyder at zombie vil vælge mellem 2 muligheder. Hvis der er en vej fremad, vil zombien vil bevæge sig fremad, og ellers (hvis der ikke er en vej fremad), vil zombien dreje til venstre.'
      3:
        image: "notes/hoc5_3.jpg"
        text: 'Ligesom "hvis"-blokken, kan vi sætte "hvis ellers" blokken ind i "gentag" blokke, således at zombien bliver ved med at bevæge sig fremad og "hvis ellers" blokken vil holde øje med om der er et sted at dreje.'
      4:
        image: "notes/hoc5_4.jpg"
        text: "Nå, flyt så de zombier hen hvor de hører hjemme!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hej, jeg er Brina, en ingeniør på Instagram. En funktion er visse linjer kode, som du vil bruge igen og igen, så i stedet for at skrive koden ud hver gang, kan du bare bruge én blok."
      2:
        image: "notes/stage13_2.jpg"
        text: "Vi skal lære at definere funktioner. Funktions definitioner har en stjerne i hjørnet. Funktionens navn er skrevet på den øverste linje."
      3:
        image: "notes/stage13_3.jpg"
        text: 'De blokke, der er inde i definitionen fortæller os, hvad den gør. Så denne funktions definition hedder "fyld 5" og den består af en "gentag" blok og en "fyld" blok.'
      4:
        image: "notes/stage13_4.jpg"
        text: 'Definitionen sidder på arbejdsområdet, men vores landmand vil ikke køre funktionen indtil vi trækker vores "fyld 5 funktion" blok ud fra funktions kategorien.'
      5:
        image: "notes/stage13_5.jpg"
        text: 'Lad os putte "fun" tilbage ind i "FUNktion!" '
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: 'Hej, Jeg er Makinde! Lad os lære om "imens" blokken. '
      2:
        image: "notes/stage9_6.jpg"
        text: '"imens" blokken vil gøre ligegyldigt hvad du lægger ind, så længe erklæringen på toppen er sand.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For eksempel, hvis landmanden står på en bunke, vil hun fortsætte med at fjerne 1 skovlfuld, imens der stadig er en bunke under hende."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hej, jeg er Trina, og jeg arbejder for Pixar. Jeg har arbejdet på en masse film, blandt andet Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'Dette er vores nye "tæller" loop. Det vil udføre handlinger igen og igen og du kan ændre handlinger lidt hver gang.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'I dette eksempel er vores "tæller" løkke siger "tæl med tæller fra 50 til 90 med 10" og inde i det, har vi vores "tegn en firkant" blok. Træk "tæller" blokket fra afsnittet "Variabler" til "længde" stedet.'
      4:
        image: "notes/stage11_4.jpg"
        text: "Dette betyder, at vores kunstner vil tegne en firkant, der har 50 pixel længde sider, så vil tilføje 10 til det og tegne en firkant med 60 pixel længde sider. Så vil det blive ved med at tilføje 10 og tegne firkanter, indtil det når 90. Så vil vi have kvadrater af 50, 60, 70, 80 og 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: "notes/hoc6_2.jpg"
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: "notes/hoc6_3.jpg"
        text: "If you liked your first hour of code, visit code.org to continue your education into computer science! Once you complete our 20 hour course, you'll have mastered the basics of programming, and can start learning how to write phone apps, robot instructions, games, you name it."
      4:
        image: "notes/hoc6_4.jpg"
        text: "Technology is changing everything we do and it doesn't matter if you're young or old: programming is fun, it's creative, and anyone can learn!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Show notes coming soon!"
