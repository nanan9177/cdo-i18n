"it":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "Benvenuti alla vostra prima ora di programmazione! Tuffiamoci subito in un tuo primo assaggio della programmazione."
      2:
        image: "notes/hoc1_2.jpg"
        text: "Useremo il Blockly, un linguaggio di programmazione visivo dove trascini e rilasci i blocchi per scrivere codice."
      3:
        image: "notes/hoc1_3.jpg"
        text: 'Gran parte del codice è digitato, ma Blockly è visivo. Ciascun blocchi corrisponde ad una riga di codice "reale".'
      4:
        image: "notes/hoc1_4.jpg"
        text: "Imparerai i fondamenti dell'informatica, concetti che sono utilizzati per creare app e controllare il rover marziano."
      5:
        image: "notes/hoc1_5.jpg"
        text: "Un programma è un insieme di istruzioni per il tuo computer da seguire."
      6:
        image: "notes/hoc1_6.jpg"
        text: "L'obiettivo del tuo primo programma è quello di ottenere un Uccello Arrabbiato attraverso un labirinto per colpire un maiale verde."
      7:
        image: "notes/hoc1_7.jpg"
        text: "Il lato sinistro è il labirinto nel quale viene eseguito il tuo programma. Le istruzioni per ciascun puzzle sono al di sotto del labirinto."
      8:
        image: "notes/hoc1_8.jpg"
        text: "La casella degli strumenti in mezzo ha i comandi per l'uccello arrabbiato. Li Userai per costruire il tuo codice."
      9:
        image: "notes/hoc1_9.jpg"
        text: "Sulla destra è la tua area di lavoro dove trascinerai bloochi dalla casella degli strumenti per costruire il tuo programma. Per eliminare un blocco, trascinarlo nel cestino nell'angolo."
      10:
        image: "notes/hoc1_10.jpg"
        text: |-
          Ciascun blocco è un istruzione. Se trascini un blocco "andare avanti" nell'area di lavoro e premi "Esegui programma", l'uccello si muove uno spazio sul labirinto.
      11:
        image: "notes/hoc1_11.jpg"
        text: "Per fare più di una azione, è possibile trascinare molti blocco nell'area di lavoro e collegarli insieme. L'uccello farà i comandi dall'alto verso il basso."
      12:
        image: "notes/hoc1_12.jpg"
        text: 'Se esegui un programma e vuoi risolverlo e provare di nuovo, premere il pulsante "Reimposta".'
      13:
        image: "notes/hoc1_13.jpg"
        text: "Andiamo a prendere quei maiali!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Hi, I'm JR! Every race car team need computer scientists to win. They analyze data from the car to make it go faster."
      2:
        image: "notes/stage5_2.jpg"
        text: "In these puzzles, you'll be an artist that draws a line behind them everywhere they go."
      3:
        image: "notes/stage5_3.jpg"
        text: 'This block says "move forward by 100 pixels." Pixels are just really tiny dots on your screen.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'This block says "turn right by 90 degrees." This will turn your artist the same amount as the "turn" blocks in the maze puzzles.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Click on the arrow in either of these blocks to change the amount the artist moves forward or turns. Play around to get familiar with these new blocks."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Hi, I'm Paola! In these puzzles, you're a farmer who has to get her field completely flat to start planting crops."
      2:
        image: "notes/stage9_2.jpg"
        text: "You have to help her remove all the piles of dirt and fill in all the holes."
      3:
        image: "notes/stage9_3.jpg"
        text: "The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shoveful of dirt to a hole."
      4:
        image: "notes/stage9_4.jpg"
        text: "The piles and holes are different sizes, so you have to tell the farmer how many shovelfuls to use."
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "Ciao, sono Mark! Impariamo dei cicli. Utilizzando i cicli puoi dire a un computer di ripetere qualsiasi serie di azioni più e più volte, migliaia o addirittura miliardi di volte."
      2:
        image: "notes/hoc2_2.jpg"
        text: "In questo puzzle, vogliamo fare in mdo che l'uccello si sposti avanti 5 spazi per raggiungere il maiale."
      3:
        image: "notes/hoc2_3.jpg"
        text: 'Possiamo usare il nuovo blocco "Ripeti" per aiutarci.'
      4:
        image: "notes/hoc2_4.jpg"
        text: 'Invece di trascinare fuori 5 blocchi "andare avanti" ...'
      5:
        image: "notes/hoc2_5.jpg"
        text: |-
          Possiamo mettere il blocco "andare avanti" all'interno del blocco "ripetizione" e scrivere un numero nel blocco per dirlo quante volte ripetere.
      6:
        image: "notes/hoc2_6.jpg"
        text: |-
          E questo è importante: è possibile inserire più di un comando all'interno di un blocco "ripetizione".
      7:
        image: "notes/hoc2_7.jpg"
        text: 'Divertiti usando il nuovo blocco "ripetere"!'
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: 'Ciao, sono Chris. Prima di entrare al Miami Heat, sono andato al Georgia Tech a studiare Informatica. Proviamo il nostro nuovo blocco, il blocco "ripetere fino a".'
      2:
        image: "notes/hoc3_2.jpg"
        text: "Cosa succede se non sapevamo quanto l'uccello a dovuto spostarsi per raggiungere il maiale?"
      3:
        image: "notes/hoc3_3.jpg"
        text: |-
          Se mettiamo un blocco "andare avanti" all'interno del blocco "ripetizione fino a", l'uccello si sposta in avanti FINO A che raggiunge il maiale (o si schianta contro un muro).
      4:
        image: "notes/hoc3_4.jpg"
        text: |-
          E questo è importante: proprio come prima, possiamo mettere più blocchi all'interno del blocco "ripetere fino al", ed essi saranno tutti essere ripetuto.
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: 'Ciao, sono Bill! Impariamo un nuovo concetto fondamentale: istruzioni "If". Questo è come i computer prendono decisioni.'
      2:
        image: "notes/hoc4_2.jpg"
        text: 'Tu stesso usi istruzioni "If" ogni giorno. Prima di andare fuori al mattino, dici SE fuori piove, ho bisogno di indossare la mia giacca.'
      3:
        image: "notes/hoc4_3.jpg"
        text: "Possiamo dire al zombie di verificare se c'è un sentiero a sinistra, e se trova un sentiero a sinistra, possiamo farlo girare in quella direzione."
      4:
        image: "notes/hoc4_4.jpg"
        text: |-
          Per scrivere il codice per questo, trasciniamo fuori il nostro blocco "se" e mettiamo un blocco "gira a sinistra" all'interno di esso.
      5:
        image: "notes/hoc4_5.jpg"
        text: |-
          Ora, se mettiamo un blocco "andare avanti" al di sopra di esso e un blocco "ripetizione" intorno a tutto, ogni volta che lo zombie si muove, controllerà se c'è un sentiero a sinistra e girerà. Il comando "repeat" è fondamentale, per verificare una curva ad ogni passo.
      6:
        image: "notes/hoc4_6.jpg"
        text: "Le dichiarazioni se sono davvero importanti in informatica. Uno dei primi programmi che ho scritto era un gioco di tic-tac-toe, e c'era una dichiarazione se che diceva se l'altra persona sta per vincere, bloccare il posto che consente loro di vincere."
      7:
        image: "notes/hoc4_7.jpg"
        text: 'Divertiti utilizzando il blocco "se"!'
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: |-
          Ciao, mi chiamo Saloni. Uso l'informatica per aiutare a risolvere i problemi nella salute e in medicina. Impariamo riguardo il blocco "se atrimenti". Sembra che il blocco "se", ma ha una parte supplementare alla fine che dice "altrimenti".
      2:
        image: "notes/hoc5_2.jpg"
        text: |-
          Se metto un blocco "andare avanti" nel posto dove dice "fare" e un blocco "sinistra" dove dice "altrimenti" ciò significa che lo zombie sceglierà tra 2 opzioni. SE c'è un percorso avanti, lo zombie si muoverà in avanti e IN CASO CONTRARIO (non c'è un percorso davanti), lo zombie svolterà a sinistra.
      3:
        image: "notes/hoc5_3.jpg"
        text: |-
          Proprio come il blocco "se", possiamo mettere blocchi "se altrimenti" all'interno un blocco "ripetizione" in modo che lo zombie continua a muoversi e il blocco "se altrimenti" manterrà a controllare se esiste un posto dove girare.
      4:
        image: "notes/hoc5_4.jpg"
        text: "Ora, prendi quei zombie laddove appartengono!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: "notes/stage13_2.jpg"
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: "notes/stage13_3.jpg"
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5 function" block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!" 
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block." 
      2:
        image: "notes/stage9_6.jpg"
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statment on the top is TRUE.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shoveful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "Complimenti! Con l'ultimo puzzle che hai risolto, hai appena scritto il codice che dice QUALUNQUE robot come trovare la sua strada attraverso un labirinto privo di ramificazione o tunnel di qualsiasi lunghezza, che si tratti di uno zombie, un uccello, un rover marziano o anche una macchina auto-guida."
      2:
        image: "notes/hoc6_2.jpg"
        text: "I concetti di base che hai utilizzato sono al centro di ogni programma o applicazione che proverai.  Abbiamo imparato dei cicli di ripetizione, dichiarazioni ripetere fino a, dichiarazioni se, ed istruzioni se altrimenti."
      3:
        image: "notes/hoc6_3.jpg"
        text: "Se ti è piaciuto la tua prima ora di programmazione, visitare code.org per continuare la vostra formazione sull'informatica! Dopo che hai completato il nostro corso di 20 ore, avrai imparato le basi della programmazione e puoi iniziare ad imparare come scrivere applicazioni per telefoni, istruzioni per robot, giochi, e molto altro."
      4:
        image: "notes/hoc6_4.jpg"
        text: "La tecnologia sta cambiando tutto ciò che facciamo e non importa se sei giovane o anziano: la programmazione è divertente, è creativo, e chiunque può imparare!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Visualizza note in arrivo!"
