"fi":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "Tervetuloa koodioppitunnille! Sukelletaanpa heti ohjelmoinnin maailmaan."
      2:
        image: "notes/hoc1_2.jpg"
        text: "Käytämme Blocklyä, joka on visuaalinen ohjelmointikieli jossa koodia kirjoitetaan vetämällä ja pudottamalla."
      3:
        image: "notes/hoc1_3.jpg"
        text: 'Yleensä koodi kirjoitetaan, mutta Blockly on visuaalinen. Kaikki palaset vastaavat riviä "oikeata" koodia.'
      4:
        image: "notes/hoc1_4.jpg"
        text: "Opit tietotekniikan perusteet eli käsitteitä, joita käytetään kaikkialla; sovelluksista Mars-mönkijän ohjaamiseen."
      5:
        image: "notes/hoc1_5.jpg"
        text: "Ohjelma on ohjepaketti, jota tietokoneesi voi seurata."
      6:
        image: "notes/hoc1_6.jpg"
        text: "Ensimmäisen ohjelmasi tehtävä on ohjata Angry Bird sokkelon läpi ja osua vihreään possuun."
      7:
        image: "notes/hoc1_7.jpg"
        text: "Ohjelmasi pyörii vasemmalla puolella sokkelossa. Jokaisen palapelin ohjeet löytyvät sokkelon alapuolelta."
      8:
        image: "notes/hoc1_8.jpg"
        text: "Keskimmäinen työkalupakki sisältää Angry Bird -komennot. Näitä käytetään koodisi rakentamiseen."
      9:
        image: "notes/hoc1_9.jpg"
        text: "Oikealla on työtilasi, johon vedetään palasia työkalupakista ja rakennetaan ohjelmasi. Jos haluat poistaa palasen, vedä se nurkasta löytyvään roskakoriin."
      10:
        image: "notes/hoc1_10.jpg"
        text: 'Jokainen palanen on yksi ohje. Jos vedät "siirrä eteenpäin" -palasen työtilaasi ja painat "suorita ohjelma", lintu liikkuu yhden ruudun sokkelossa.'
      11:
        image: "notes/hoc1_11.jpg"
        text: "Suorittaaksesi enemmän kuin yhden toiminnon, voit vetää monta palasta työtilaasi ja kiinnittää ne toisiinsa. Lintu tekee toiminnot ylhäältä alaspäin."
      12:
        image: "notes/hoc1_12.jpg"
        text: 'Jos suoritat ohjelman ja haluat korjata ja yrittää uudelleen, paina "reset" nappulaa.'
      13:
        image: "notes/hoc1_13.jpg"
        text: "Eikun vain possujen kimppuun!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Hei, olen JR! Kaikki ralliautotiimit tarvitsevat tietojenkäsittelyasiantuntijan voittaakseen. He analysoivat auton tietoja saadakseen sen kulkemaan lujempaa."
      2:
        image: "notes/stage5_2.jpg"
        text: "Näissä palapeleissä olet taiteilija, joka piirtää viivan niiden taakse, mihin ikinä ne menevätkin."
      3:
        image: "notes/stage5_3.jpg"
        text: 'Tässä palasessa lukee "mene eteenpäin 100 pikseliä". Pikselit ovat pikkiriikkisiä pisteitä näytölläsi.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'Tässä palasessa lukee "käänny oikeaan 90 astetta". Se kääntää taitelijaasi saman verran kuin "käännä"-palaset sokkelotehtävissä.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Paina nuolta kummassa vain näistä palasista muuttaaksesi määrää, jonka taiteilija kulkee eteenpäin tai kääntyy. Leikittele hetki tutustuaksesi näihin uusiin palasiin."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Hei, olen Paola! Näissä palapeleissä olet maanviljelijä, jonka täytyy saada peltonsa täysin tasaiseksi aloittaakseen istutukset."
      2:
        image: "notes/stage9_2.jpg"
        text: "Sinun täytyy auttaa häntä poistamaan kaikki multakasat ja täyttämään kaikki kuopat."
      3:
        image: "notes/stage9_3.jpg"
        text: "Uudet palaset poistavat yhden lapiollisen multaa kasasta ja täyttävät yhden lapiollisen multaa kuoppaan."
      4:
        image: "notes/stage9_4.jpg"
        text: "Kasat ja kuopat ovat erikokoisia, joten sinun täytyy kertoa maanviljelijälle kuinka monta lapiollista hänen tulisi käyttää."
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "Hei, olen Mark! Opetellaanpa luuppausta. Luuppauksella voit käskeä tietokonetta toistamaan mitä vain toimintoa uudelleen ja uudelleen, tuhansia tai jopa miljardeja kertoja."
      2:
        image: "notes/hoc2_2.jpg"
        text: "Tässä palapelissä voimme liikuttaa lintua 5 ruutua eteenpäin osuaksemme possuun."
      3:
        image: "notes/hoc2_3.jpg"
        text: 'Voimme käyttää uutta "toista"-palasta apunamme.'
      4:
        image: "notes/hoc2_4.jpg"
        text: 'Sen sijaan että vetäisimme 5 "liiku eteenpäin" -palasta...'
      5:
        image: "notes/hoc2_5.jpg"
        text: 'Voimme laittaa "liiku eteenpäin" -palasen "toista"-palasen sisään ja kirjoittaa numeron palaseen kertoaksemme sille kuinka monta kertaa pitää toistaa.'
      6:
        image: "notes/hoc2_6.jpg"
        text: 'Ja tämä on tärkeää: voit laittaa enemmän kuin yhden komennon "toista"-palaseen.'
      7:
        image: "notes/hoc2_7.jpg"
        text: 'Pidä hauskaa uuden "toista"-palasen kanssa!'
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: 'Hei, olen Chris. Ennen kuin liityin Miami Heatiin, opiskelin tietojenkäsittelyä Georgian teknillisessä oppilaitoksessa. Kokeillaanpa uutta "toista kunnes" -palasta.'
      2:
        image: "notes/hoc3_2.jpg"
        text: "Mitä jos emme tietäisi kuinka pitkälle linnun pitäisi liikkua saavuttaakseen possun?"
      3:
        image: "notes/hoc3_3.jpg"
        text: 'Jos laitamme "liiku eteenpäin" -palasen "toista kunnes" -palasen sisälle, lintu liikkuu eteenpäin KUNNES se saavuttaa possun (tai törmää seinään).'
      4:
        image: "notes/hoc3_4.jpg"
        text: 'Ja tämä on tärkeää: aivan kuin ennenkin, voimme laittaa monta palasta "toista kunnes" -palaseen, niin että ne kaikki toistuvat.'
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: |-
          Hi, I'm Bill! Let's learn a new fundamental concept: "If" statements. This is how computers make decisions.
      2:
        image: "notes/hoc4_2.jpg"
        text: |-
          You use "If" statements yourself everday. Before you go outside each morning, you say IF it's raining outside, I need to wear my jacket.
      3:
        image: "notes/hoc4_3.jpg"
        text: "We can tell the zombie to check IF there's path to the left, and if he finds a path to the left, we can have him turn in that direction."
      4:
        image: "notes/hoc4_4.jpg"
        text: |-
          To write the code for this, let's drag out our "if" block and put a "turn left" block inside it.
      5:
        image: "notes/hoc4_5.jpg"
        text: |-
          Now, if we put a "move forward" block above it and a "repeat" block around everything, each time the zombie moves, he'll check if there's a path to the left and turn. The "repeat" command is critical, to check for a turn at every step.
      6:
        image: "notes/hoc4_6.jpg"
        text: "If statements are really important in computer science. One of the first programs I wrote was a tic-tac-toe game, and there was a If statement that said IF the other person is about to win, block the spot that lets them win."
      7:
        image: "notes/hoc4_7.jpg"
        text: 'Have fun using the "if" block!'
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: "notes/hoc5_2.jpg"
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: "notes/hoc5_3.jpg"
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: "notes/hoc5_4.jpg"
        text: "Now, get those zombies where they belong!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: "notes/stage13_2.jpg"
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: "notes/stage13_3.jpg"
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5 function" block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!" 
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block." 
      2:
        image: "notes/stage9_6.jpg"
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statment on the top is TRUE.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shoveful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: "notes/hoc6_2.jpg"
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: "notes/hoc6_3.jpg"
        text: "If you liked your first hour of code, visit code.org to continue your education into computer science! Once you complete our 20 hour course, you'll have mastered the basics of programming, and can start learning how to write phone apps, robot instructions, games, you name it."
      4:
        image: "notes/hoc6_4.jpg"
        text: "Technology is changing everything we do and it doesn't matter if you're young or old: programming is fun, it's creative, and anyone can learn!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Show notes coming soon!"
