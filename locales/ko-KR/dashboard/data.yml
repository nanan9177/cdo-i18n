"ko":
  data:
    script:
      name:
        20-hour:
          desc: "K-8 Intro to Computer Science Course"
          Maze: "Stage 1"
          Artist: "Stage 2"
          Artist2: "Stage 3"
          Farmer: "Stage 4"
          Artist3: "Stage 5"
          Farmer2: "Stage 6"
          Artist4: "Stage 7"
          Farmer3: "Stage 8"
          Artist5: "Stage 9"
        Hour of Code:
          desc: "Hour of Code"
          Maze: "Stage 1"
        Edit Code:
          desc: "Edit Code"
          MazeEC: "Stage 1"
    game:
      name:
        Unplug1: "Introduction to Computer Science"
        Maze: "The Maze"
        Unplug2: "Computational Thinking"
        Unplug3: "Graph Paper Programming"
        Artist: "The Artist"
        Unplug4: "Algorithms"
        Artist2: "The Artist 2"
        Unplug5: "Functional"
        Farmer: "The Farmer"
        Unplug6: "Conditionals"
        Artist3: "The Artist 3"
        Unplug7: "Song Writing"
        Farmer2: "The Farmer 2"
        Unplug8: "Abstraction"
        Artist4: "The Artist 4"
        Unplug9: "Relay Programming"
        Farmer3: "The Farmer 3"
        Unplug10: "The Internet"
        Artist5: "The Artist 5"
        Unplug11: "Wrap-up"
        MazeEC: "The Maze"
    trophy:
      name:
        Bronze: "Bronze"
        Silver: "Silver"
        Gold: "Gold"
    concept:
      description:
        sequence: "Sequence"
        if: "If block"
        if_else: "If-else block"
        loop_times: "Repeat times block"
        loop_until: "Repeat until block"
        loop_while: "While block"
        loop_for: "Counter block"
        function: "Functions"
        parameters: "Functions with parameters"
    level:
      instructions:
        maze_2_2: '안녕! 녹색 돼지를 잡고 싶어! "move forward" 블럭을 여러 개 이용하고, "Run Program" 을 눌러서 저기로 이동시켜줘.'
        maze_2_1: "녹색 돼지에게 갈 수 있도록 다른 프로그램을 만들어줘."
        maze_2_2_5: "어떻게 해야 녹색 돼지에게 갈 수 있을까?(TNT 폭탄 조심)"
        maze_2_3: "어떻게 해야 녹색 돼지에게 갈 수 있을까?(TNT 폭탄 조심)"
        maze_2_4: "으~아! TNT 폭탄을 돌아 녹색 돼지에게 이동할 수 있는 프로그램을 만들어줘."
        maze_2_5: "블럭 2개만 이용해서 녹색 돼지에게 갈 수는 없을까? 어때?"
        maze_2_6: "3개 블럭만 이용해서 녹색 돼지에게 갈 수는 없을까?"
        maze_2_7: '가장 적은 블럭으로 녹색 돼지에게 이동할 수 있도록 해줘. "repeat times" 블럭을 1개 이상 이용하면 될 꺼야.'
        maze_2_8: '이 문제를 풀려면 "repeat" 블럭 안에 3개의 블럭을 넣으면 되 : move, move, turn.'
        maze_2_9: '좋아! 그럼 이번에는 새로운 "repeat until" 블럭을 사용해 보자. 녹색 돼지까지 도착할 때까지 계속 반복할 꺼야.'
        maze_2_10: "좋아! 이번에는 마지막 연습이야 - 블럭 4개만 사용해서 풀 수 있겠어?"
        maze_2_11: "여~어~러~부~운~~~. 나 좀비. 배고파. 해바라기 가지고 싶어... 블럭 5개만 가지고 가능할까?"
        maze_2_12: "이번 것도 비슷한데 약간 달라. 블럭 5개만 가지고 가능하겠어?"
        maze_2_13: '새로 나온 "if" 블럭을 이용하면 언제 회전할지 알려 줄 수 있어. 힌트: 블럭 1개만 더 사용하면 되지만, 사용하는 방법을 익혀야 다음에 사용할 수 있다.'
        maze_2_14: '음... 이번이 마지막 퍼즐인데~, "if" 블럭하고 "repeat" 블럭을 함께 사용해야되.'
        maze_2_15: '해바라기 가지고 싶어~! "if" 블럭을 사용해서 가장 적은 블럭으로 나를 해바라기로 데려다줘.'
        maze_2_16: "좋아... 한 번 더 해보자 - 이번 것도 그렇게 어렵지는 않지만, 식충 식물을 조심해!"
        maze_2_17: '새로운 "If-else" 블럭은 조건을 검사해~, 검사를 하고 나면 두 가지 일 중에 하나를 해. 새로운 블럭을 이용해서 나를 해바라기로 데려다 줘.'
        maze_2_18: '"if-else" 블럭을 다시 한 번 사용해 보자~, 한 번에 성공할 수 있을까?'
        maze_2_19: "더 복잡한 미로라도 모두 빠져나가도록 하려면, 단지 블럭 3개만 더 추가하면 된데...  너가 성공하면, 난 아무리 복잡한 미로라도 거뜬히 통과할 수 있을 거야."
        turtle_1_1: "안녕! 나는 예술가야. 너는 내가 어떤 것이든지 그리게 할 수 있어. 그림의 회색 선을 따라 그림을 그리기 위해 아주 적은 몇 개의 블럭들만 사용하면 되."
        turtle_1_2: '자, 이제 사각형을 그려봐. 참고 : "set color" 블럭을 사용하면 원하는 색을 사용할 수 있음.'
        turtle_1_3: "블럭 3개만 가지고 사각형을 그려봐."
        turtle_1_4: '사용할 때마다 색이 바뀌는 "random color" 블럭을 사용해서, 세 변의 색이 다른 삼각형을 그려봐. 힌트: 회전 블럭을 사용해 회전 각도를 정해주어야 한다.'
        turtle_1_5: "자, 이제 사각형 안에 삼각형이 들어있는 모양을 그려봐."
        turtle_1_6: "삼각형하고 사각형을 어떻게 그릴까? 힌트: 삼각형을 먼저 그리고나서, 사각형을 그리기 위해 몇 도를 돌아야 할지 생각해야 한다."
        turtle_1_7: "자. 이제 좀더 어려운 것을 해보자 - 초록색 안경을 그릴 수 있을까? 사각형은 각 변의 크기가 100 픽셀이고 50 픽셀만큼 떨어져 있어. 녹색으로 그리는 것 잊지 말고!"
        turtle_1_8: '자, 그럼 이번에는 이 코드를 실행시켰을 때 무슨 일이 벌어지나 살펴보자.(아니면 직접 "Run"을 눌러 실행시켜 본다.) 그런 다음에 나머지 그림을 완성시켜봐. 색은 매번 달라질 거야.'
        turtle_1_9: "원을 그리려면, 물음표로 표시된 부분에 어떤 수를 넣어야 할까?"
        turtle_1_10: '잘했어! 이제 그리고 싶은 그림을 그려봐. 재미있는 몇 가지 아이디어 : 막대기 모양, 해바라기 모양, 나선 모양. 새 "set width" 블럭을 사용해보자. 재미있게 놀아봐!'
        turtle_4_1: '블럭 3개만 가지고 각 변의 길이가 100 픽셀인 삼각형을 그릴 수 있겠어? 힌트: "repeat" 블럭을 사용한다.'
        turtle_4_2: '이 퍼즐을 해결하려면 블럭 1개만 추가하면 되. 힌트 : 삼각형을 그리는 2개의 블럭이 주어져 있다. "turn" 블럭을 그 사이에 넣어 연결하고, 어느 정도 회전해야 하는지 찾아보자.'
        turtle_4_3: '자, 여기 삼각형을 그리기 위한 코드가 있어. "repeat" 블럭과 "turn" 블럭을 이용해서 이쁜 꽃을 만들 수 있겠니?'
        turtle_4_4: "이전 퍼즐과 같은 코드인데, 각 삼각형을 그린다음에 36도 만 회전해. 몇 번이나 반복해야 할까? (힌트: 360 도를 회전하면 원이 그려질 것이다.)"
        turtle_4_5: "이전 퍼즐과 같은 코드인데, 36 번 반복해. 몇 도 회전해야 할까? (힌트: 360 도를 회전하면 원이 그려질 것이다.)"
        turtle_4_6: "블럭 3개만 사용해서, 한 변의 길이가 20 픽셀인 사각형을 그릴 수 있겠어?"
        turtle_4_7: "이전 퍼즐에서 사각형을 그리는 코드를 가져왔어. 사각형을 10개 붙여서 사다리 같은 모양을 만들 수 있겠어? 힌트: 블럭 2개 만 더 있으면 가능하다."
        turtle_4_8: "이전 퍼즐의 답이 여기 있어. 2 개의 블럭을 더 붙여서 그림을 그릴 수 있을까?"
        turtle_4_9: "이전 퍼즐의 답이 여기 있어. 그림을 그리려면 몇 도를 회전해야 할까? (몇 번 찍어보면 될 것이다.)"
        turtle_4_10: "이전 퍼즐의 답이 여기 있어. 그림을 그리려면 몇 변 반복해야 할까?"
        turtle_4_11: '다른 패턴들을 만들어 내기 위해 "turn" 과 "repeat" 블럭의 수를 바꾸거나, 나머지 블럭들의 코드를 바꿔가면서 그려지는 그림을 실험해 보세요.'
        maze_karel_1_1: '안녕! 나는 농부야. 내 농장에 밭을 평평하게 만들어 식물을 심기 위해 도움이 필요해. 흙더미로 이동시켜서 "remove" 블럭을 사용하면, 흙더미를 없앨 수 있어.'
        maze_karel_1_2: '자, 다음으로 구덩이로 이동해서, "fill" 블럭을 사용해서 흙을 두 번 삽질하면 구덩이를 매울 수 있게 해줘.'
        maze_karel_1_3: "흙더미로 이동해서, 가장 적은 블럭들을 사용해 흙더미를 제거할 수 있는 방법을 알려줘."
        maze_karel_1_4: '4개의 흙더미를 없앨 수 있도록 도와줄 수 있겠어? 힌트: "repeat" 블럭을 사용할 수 있으면, 사용하면 된다.'
        maze_karel_1_5: '5번씩 삽질해야하는 이 모든 구덩이를 메꿀 수 있도록 도와줘. 힌트: "while" 블럭 안에 "repeat" 블럭을 넣을 수 있다.'
        maze_karel_1_6: '최대한 적은 블럭을 사용해 모든 흙더미를 제거시켜줘. "while" 블럭에서 오른쪽 클릭 해서 메뉴를 선택하면 내가 흙더미 위에 있는지, 구덩이 위에 있는지 알 수 있게 되.'
        maze_karel_1_7: "와! 진짜 깊은 구덩이를 발견했어! 이 구덩이를 메꾸려면 몇 번 삽질해야 할 지 모르겠어. 구덩이가 다 메꾸어 질 때까지, 흙을 채우는 프로그램을 만들 수 있겠어?"
        maze_karel_1_8: "블럭을 최대한 적게 사용해서, 밭의 끝에 있는 구멍을 메꿀 수 있게 도와줘."
        maze_karel_1_9: 'Make me remove all these piles of dirt. Try to use as few blocks as possible. Hint: try using a "while" block.'
        maze_karel_1_10: '너무 늦게까지 일했네.. 너무 어두워 져서 흙더미가 어디 어디에 있는지 잘 모르겠어. 그런데 "while" 블럭에서 사용할 수 있었던 옵션들 중에 일부만 사용할 수 있네. 내가 밭을 가로 질러 가면서, 흙더미가 있으면 없앨 수 있게 도와줘.'
        maze_karel_1_11: '아직도 어두워. 밭을 가로질러 가면서, 흙더미가 있으면 없애고, 구덩이가 있으면 채울 수 있게 도와줘. 힌트: "if" 블럭에서 오른쪽 클릭하면 추가 메뉴가 나타남.'
        turtle_2_1: "안녕. 나는 예술가 좀비야. 그림 그리는 걸 좋아해! 원하는 색으로 사각형을 그릴 수 있게 도와줘. 중요: 이전에 사용했던 블럭들을 사용할 수 있지만, 분류되어 있다."
        turtle_2_2: '함수 활용 부분에 온 것을 환영합니다. 함수 블럭을 사용하면 새로운 블럭을 만들어 사용할 수 있습니다! "Functions" 에서, 새로운 "draw a square" 블럭을 찾아 50x50 크기의 녹색 사각형을 그려보세요.'
        turtle_2_3: '"Loop" 에 있는 "repeat" 블럭을 사용해, 크기 100 짜리 정사각형을 120도 만큼 씩 회전시켜, random color 로 3개 만들어 보세요.'
        turtle_2_4: "자 이제, 더 멋진 것을 만들어 봅시다. 코드를 수정해서 36 개의 사각형을 그리는데, 100 픽셀 크기로 10 도씩 회전시켜 그려보세요. 힌트: 더 빨리 그리도록 하기 위해 슬라이더를 사용할 수 있다."
        turtle_2_5: '50, 60, 70, 80, 90 픽셀 크기의 정사각형을 그리세요. "draw a square" 함수를 5 번 사용해야 할 것입니다.'
        turtle_2_6: '이전 문제와 같은 사각형들을 그리기 위해서, 이번에는 카운터를 사용할 거에요. "counter" 블럭을 사용해, 카운터 값과 같은 크기로 사각형들을 그릴 수 있습니다. 힌트: "counter" 블럭은 "Variables" 에 있습니다.'
        turtle_2_7: '이제, 달팽이 나선을 그려봅시다. 하지만 블럭이 실행되지 않도록 되어있네요. "count with" 블럭을 사용해, 달팽이 나선을 그리는 다른 프로그램을 만들어 보세요. "Loops"에는 "count with" 블럭이 있고, "Variables" 에는 "counter" 블럭이 있습니다.'
        turtle_2_7_5: '이제, "Functions" 에서 새로운 "draw a snowman" 를 사용할 수 있습니다. 높이가 250, 100 짜리인 눈사람 2개를 만들어 보세요.'
        turtle_2_8: '이번에는 잘 생각해야 할 거에요. "draw a snowman" 함수하고, "Actions" 에 있는 새로운 "jump forward" 블럭을 사용하세요. 3 개의 눈사람을 서로 다른 색으로 100 픽셀 만큼 거리를 띄워 그려보세요.'
        turtle_2_9: '"count with" 반복 실행 구조를 사용해, 110, 100, 90, 80, 70 크기의 눈사람 가족을 만드세요. 눈사람들은 60 픽셀 만큼 씩 떨어져 있습니다.'
        turtle_2_10: "이번에는 다양한 달팽이 나선을 그리는 연습을 해보세요. 회전하는 비율을 바꾸면 어떻게 될까요? 반복 샐행 구조에서 랜덤 색으로 바꾸면 어떻게 될까요? 아무거나 그려보세요."
        maze_karel_2_1: '밭에 있는 모든 흙더미와 구덩이를 없앨 수 있게 도와줘. 블럭을 여러 번 사용할 필요 없이 "loops" 를 활용하면 되. 힌트: 반복 실행 구조 안에 다른 반복 실행 구조를 넣을 수 있다.'
        maze_karel_2_2: '"fill 5"라는 블럭을 새로 만들어서, "Functions"에 넣어 두었어. 그걸 이용해서 구덩를 메꿀 수 있게 도와줘.'
        maze_karel_2_3: '새로 만들어 넣은 "fill 5" 함수 블럭을 이용해서, 모든 구덩이들을 메꿀 수 있게 해줘. "Functions" 에서 "fill 5" 블럭을 가져와서 사용해야 할꺼야.'
        maze_karel_2_4: '삽질을 7 번 하는 "removes 7" 함수를 새로 만들고, 그걸 사용해서 흙더미를 모두 없앨 수 있도록 도와줘.'
        maze_karel_2_5: '삽질을 6 번 하는 "removes 6" 함수를 새로 만들고, 그걸 사용해서 흙더미를 모두 없앨 수 있도록 도와줘.'
        maze_karel_2_6: '"fill 8", "remove 8" 함수를 사용해서, 흙더미를 없애고 구멍을 메꿀 수 있도록 도와줘.'
        maze_karel_2_7: '어머 내 밭에 젖소가 있네! 젖소를 피해서 흙더미를 없앨 수 있는 새로운 함수 "avoid the cow and remove 1" 를 만들어줘. 함수를 만들고 그 안에 모든 블럭들을 집어넣으면 되. '
        maze_karel_2_8: '새로운 "avoid the cow and remove 1" 함수를 이용해서, 흙더미를 모두 없앨 수 있게 도와줘.'
        maze_karel_2_9: '자 여기에, 위쪽으로 연속된 4개의 흙더미를 없앨 수 있는,  "remove stack of 4 piles" 함수가 만들어져 있어. 이 함수를 반복 실행 구조에 넣어서, 간단히 모든 흙더미를 없앨 수 있게 도와줘.'
        maze_karel_2_10: "밭을 이동하면서, 두 개의 함수를 이용해서, 모든 흙더미와 구덩이들을 없앨 수 있도록 도와줘."
        turtle_3_1: '이 퍼즐에서는 "draw a square", "draw a circle" 함수 안에 정의된 내용이 주어집니다. 하지만, 함수를 정의했다고 해서 함수가 실행되지는 않습니다. 사각형을 그리기 위해서는 "draw a square" 블럭을 가져와야 합니다.'
        turtle_3_2: '예시로 주어진 "draw a square" 함수를 살펴보고, "draw a triangle" 함수를 만들어 사용하세요.'
        turtle_3_3: "고양이를 위해 삼각형 울타리를 그리고, 젖소를 위해 사각형 울타리를 그리세요. 팁: 프로그램을 여러 번 테스트해 보세요."
        turtle_3_4: '"draw a square" 와 "draw a triangle" 함수를(그리고 다른 블럭들을) 이용해 사자 우리를 어떻게 만들어 낼 지 생각해 보세요.'
        turtle_3_5: '이제, 새로운 "draw a house" 함수를 만들고, 이용해서 2마리 고양이 집을 만드세요. 힌트: "do something" 블럭을 이용해 새로운 함수 블럭을 만들고, 원하는 이름을 붙이면 된다.'
        turtle_3_6: '예시로 제시된 "draw a square" 함수 블럭을 살펴보고, "draw a triangle" 함수 블럭에 입력 변수 "length" 를 추가하세요. 그 다음, 다른 크기의 삼각형을 그리면 됩니다. (힌트: 별 모양을 눌러 함수에 값을 전달하기 위한 입력 변수를 추가할 수 있다.) '
        turtle_3_7: '"draw a house" 함수에 "length" 입력 변수를 추가하고, 코끼리를 위해 큰 집을 만드세요. (각 선의 길이는 150 픽셀이다.)'
        turtle_3_8: '이전 퍼즐에서 사용된 블럭들이 모두 있다. "draw a house" 함수 블럭을 수정해서, 마지막에는 집의 오른쪽 아래로 이동할 수 있도록 해 보자. 주어진 함수 블럭을 수정해 3 개의 집을 지어보자.'
        turtle_3_9: '아무런 도움 없이 "draw a house" 함수를 만들 수 있을까? 도전해서 연속된 집들을 만들어 보자.'
        turtle_3_10: "지금까지 많은 것들을 배웠다! 이제 아무거나 원하는 것을 그려보자. 별, 달팽이 나선, 눈 결정 등 멋진 것들을 그려보자."
        maze_karel_debug_seq_1: "디버깅 퍼즐에 오신 것을 환영합니다! 만든 코드가 제대로 동작하지 않아요. 틀린 부분을 찾아내 고쳐서, 식물을 키울 수 있도록 밭을 모두 평평하게 만들 수 있게 해 주세요."
        maze_karel_debug_seq_2: "뭐가 잘못된 것일까요? 어떻게 해야 흙더미를 모두 없앨 수 있을까요?"
        maze_karel_debug_repeat: "이 프로그램의 오류를 고쳐서, 밭을 깨끗하고 평평하게 만들수 있도록 도와주세요."
        maze_karel_debug_while: "구덩이를 메꾸려면 어떻게 고쳐야 할까요?"
        maze_karel_debug_if: "도와주세요! 밭을 모두 평평하게 만들 수 있도록, 프로그램을 고쳐주세요."
        maze_karel_debug_if_else: "프로그램을 고쳐서, 구덩이를 채우고 흙더미를 치울 수 있게 도와주세요."
        maze_karel_debug_function_1: "흙더미를 모두 치우기 위해서는 어떻게 바꿔야 할까요?"
        maze_karel_debug_function_2: "어떻게 해야 내 밭을 평평하게 만들 수 있을까요? 프로그램을 고쳐 주세요."
        maze_karel_debug_function_3: "프로그램을 고쳐주시면, 흙더미들을 모두 깨끗이 치울 수 있을 거에요."
        turtle_5_1: "주어진 프로그램을 실행시켜보고, 수정해서 실행시켜 보세요. 어떻게 동작하는지? 이해할 수 있을까요?(지우고 완전히 새로 만들어 봐도 됩니다.)"
        turtle_5_2: "주어진 프로그램을 실행시켜보고, 수정해서 실행시켜 보세요. 어떻게 동작하는지? 이해할 수 있을까요?(지우고 완전히 새로 만들어 봐도 됩니다.)"
        turtle_5_3: "주어진 프로그램을 실행시켜보고, 수정해서 실행시켜 보세요. 어떻게 동작하는지? 이해할 수 있을까요?(지우고 완전히 새로 만들어 봐도 됩니다.)"
        turtle_5_4: "주어진 프로그램을 실행시켜보고, 수정해서 실행시켜 보세요. 어떻게 동작하는지? 이해할 수 있을까요?(지우고 완전히 새로 만들어 봐도 됩니다.)"
        turtle_5_5: "주어진 프로그램을 실행시켜보고, 수정해서 실행시켜 보세요. 어떻게 동작하는지? 이해할 수 있을까요?(지우고 완전히 새로 만들어 봐도 됩니다.)"
        turtle_5_6: "주어진 프로그램을 실행시켜보고, 수정해서 실행시켜 보세요. 어떻게 동작하는지? 이해할 수 있을까요?(지우고 완전히 새로 만들어 봐도 됩니다.)"
        maze_3_1: "돼지를 잡아야되! 몇 번 움직여야 하는지 move( ) 횟수를 입력해 줘 ; 그래야 내 알들을 되찾을 수 있어. "
        maze_3_2: "돼지를 잡을 수 있도록, 나를 프로그래밍 해 줘."
        maze_3_3: "어떻게 해야 돼지를 잡을 수 있지? TNT로는 가지 않도록 해 줘."
        maze_3_4: "아~~~! TNT를 피해서 돼지를 잡을 수 있게 해 줘."
      levelIncompleteError:
        maze_2_8: '이 퍼즐을 해결하기 위해서는, 반복되는 패턴을 찾아내야 합니다. "repeat" 블럭 안에 3 개의 블럭을 넣어보세요 : move, move, turn right'
      other1StarError:
        maze_2_14: '"repeat" 블럭 안에 "if" 블럭을 넣어야 합니다. 어렵다면? 이전 퍼즐을 통해, 어떻게 동작하는지 살펴보세요.'
      tooFewBlocksMsg:
        maze_2_8: '이 퍼즐을 해결하기 위해 반복되는 패턴을 찾아야 해. "repeat" 블럭 안에 3가지 블럭을 넣어 사용해 : move, move, turn right'
    video:
      name:
        maze_intro: "Maze Intro"
        artist_intro: "Artist Intro"
        farmer_intro: "Farmer Intro"
        loop_times: "Repeat Times Block"
        loop_until: "Repeat Until Block"
        if: "If Block"
        if_else: "If/else Block"
        function: "Functions"
        loop_while: "While Block"
        loop_for: "Counter Block"
        parameters: "Functions with Parameters"
        hoc_wrapup: "Hour of Code Wrapup"
        20_wrapup: "20-Hour Wrapup"
