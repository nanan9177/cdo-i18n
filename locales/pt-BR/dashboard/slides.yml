pt-BR:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.png
        text: "Welcome to your first hour of code! Let's dive right into your first taste of programming."
      2:
        image: notes/hoc1_2.png
        text: Vamos usar o Blockly, uma linguagem de programação visual onde você arrasta e solta blocos para escrever código.
      3:
        image: notes/hoc1_3.png
        text: Most code is typed, but Blockly is visual. Each blocks corresponds to a line of "real" code.
      4:
        image: notes/hoc1_4.png
        text: "You'll learn the foundations of computer science, concepts which are used anywhere from making apps to controlling the Mars rover."
      5:
        image: notes/hoc1_5.png
        text: Um programa é um conjunto de instruções para o seu computador seguir.
      6:
        image: notes/hoc1_6.png
        text: The goal of your first program is to get an Angry Bird through a maze to hit a Green Pig.
      7:
        image: notes/hoc1_7.png
        text: The left side is the maze where your program is run. The instructions for each puzzle are below the maze.
      8:
        image: notes/hoc1_8.png
        text: "The middle toolbox has the commands for the Angry Bird. You'll use these to build your code."
      9:
        image: notes/hoc1_9.png
        text: "On the right is your workspace where you'll drag blocks from the toolbox to build your program. To delete a block, drag it to the trash in the corner."
      10:
        image: notes/hoc1_10.png
        text: Each block is one instruction. If you drag a "move forward" block to your workspace and press "Run Program", the bird moves one space on the maze.
      11:
        image: notes/hoc1_11.png
        text: To do more than one action, you can drag many block to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.png
        text: Se você executa um programa e quer corrigi-lo e tentar novamente, pressione o botão "Refazer".
      13:
        image: notes/hoc1_13.png
        text: Vamos pegar esses porcos!
    artist_intro:
      1:
        image: notes/bird.png
        text: Mostrar notas em breve!
    farmer_intro:
      1:
        image: notes/bird.png
        text: Mostrar notas em breve!
    loop_times:
      1:
        image: notes/hoc2_1.png
        text: "Hi, I'm Mark! Let's learn about loops. Using loops you can tell a computer to repeat any set of actions over and over, thousands or even billions of times."
      2:
        image: notes/hoc2_2.png
        text: Neste quebra-cabeça, queremos fazer o pássaro avançar 5 espaços para chegar ao porco.
      3:
        image: notes/hoc2_3.png
        text: We can use the new "repeat" block to help us out.
      4:
        image: notes/hoc2_4.png
        text: Em vez de arrastar 5 blocos "Avançar"...
      5:
        image: notes/hoc2_5.png
        text: We can put the "move forward" block inside the "repeat" block and write a number in the block to tell it how many times to repeat.
      6:
        image: notes/hoc2_6.png
        text: 'And this is important: you can put more than one command inside a "repeat" block.'
      7:
        image: notes/hoc2_7.png
        text: Aproveite o uso do seu novo bloco "repetir"!
    loop_until:
      1:
        image: notes/hoc3_1.png
        text: |-
          Hi, I'm Chris. Before joining the Miami Heat, I went to Georgia Tech to study Computer Science. Let's try our new block, the "repeat until" block.
      2:
        image: notes/hoc3_2.png
        text: "What if we didn't know how far the bird had to move to get to the pig?"
      3:
        image: notes/hoc3_3.png
        text: If we put a "move forward" block inside the "repeat until" block, the bird will move forward UNTIL it reaches the pig (or crashes into a wall).
      4:
        image: notes/hoc3_4.png
        text:
          And this is important: ;just like before, we can put multiple blocks inside the "repeat until" block, and they will all be repeated.
    if:
      1:
        image: notes/hoc4_1.png
        text: |-
          Hi, I'm Bill! Let's learn a new fundamental concept: "If" statements. This is how computers make decisions.
      2:
        image: notes/hoc4_2.png
        text: |-
          You use "If" statments yoruself everday. Before you go outside each morning, you say IF it's raining outside, I need to wear my jacket.
      3:
        image: notes/hoc4_3.png
        text: "We can tell the zombie to check IF there's path to the left, and if he finds a path to the left, we can have him turn in that direction."
      4:
        image: notes/hoc4_4.png
        text: |-
          To write the code for this, let's drag out our "if" block and put a "turn left" block inside it.
      5:
        image: notes/hoc4_5.png
        text: |-
          Now, if we put a "move forward" block above it and a "repeat" block around everything, each time the zombie moves, he'll check if there's a path to the left and turn. The "repeat" command is critical, to check for a turn at every step.
      6:
        image: notes/hoc4_6.png
        text: If statements are really important in computer science. One of the first programs I wrote was a tic-tac-toe game, and there was a If statement that said IF the other person is about to win, block the spot that lets them win.
      7:
        image: notes/hoc4_7.png
        text: 'Divirta-se usando o bloco  "SE"!'
    if_else:
      1:
        image: notes/hoc3_1.png
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc3_1.png
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc3_1.png
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc3_1.png
        text: Agora coloque os zumbis onde eles devem ficar!
    function:
      1:
        image: notes/bird.png
        text: Mostrar notas aparecerá em breve!
    loop_while:
      1:
        image: notes/bird.png
        text: Mostrar notas aparecerá em breve!
    loop_for:
      1:
        image: notes/bird.png
        text: Mostrar notas aparecerá em breve!
    parameters:
      1:
        image: notes/bird.png
        text: Mostrar notas aparecerá em breve!
    hoc_wrapup:
      1:
        image: notes/hoc3_1.png
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: notes/hoc3_1.png
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: notes/hoc3_1.png
        text: Se você gostou de sua primeira hora de código, visite code.org para continuar sua educação em ciência da computação! Uma vez que você completar o nosso curso de 20 horas, você terá dominado o básico de programação e pode começar a aprender como escrever aplicativos de telefone, instruções de robô, jogos, tudo.
      4:
        image: notes/hoc6_4.png
        text: "A tecnologia está mudando tudo o que fazemos e não importa se você é jovem ou velho: programação é divertido, é criativo, e qualquer um pode aprender!"
    20_wrapup:
      1:
        image: notes/bird.png
        text: Mostrar notas aparecerá em breve!
