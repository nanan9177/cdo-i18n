"pt-BR":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "Bem-vindo à sua primeira hora de código! Vamos mergulhar logo em seu primeiro experimento com programação."
      2:
        image: "notes/hoc1_2.jpg"
        text: "Vamos usar o Blockly, uma linguagem de programação visual onde você arrasta e solta blocos para escrever código."
      3:
        image: "notes/hoc1_3.jpg"
        text: 'Grande parte do código é digitado, mas Blockly é visual. Cada bloco corresponde a uma linha de código "real".'
      4:
        image: "notes/hoc1_4.jpg"
        text: "Você vai aprender os fundamentos da ciência da computação, conceitos que são usados em qualquer lugar de fazer aplicativos para controlar um veículo não tripulado em missão a Marte."
      5:
        image: "notes/hoc1_5.jpg"
        text: "Um programa é um conjunto de instruções para o seu computador seguir."
      6:
        image: "notes/hoc1_6.jpg"
        text: "O objetivo do seu primeiro programa é conduzir um Pássaro Irritado através de um labirinto para abater um Porco Verde."
      7:
        image: "notes/hoc1_7.jpg"
        text: "O lado esquerdo é o labirinto onde o programa é executado. As instruções para cada quebra-cabeça estão abaixo do labirinto."
      8:
        image: "notes/hoc1_8.jpg"
        text: "A caixa de ferramentas do meio possui os comandos para o Pássaro Irritado. Você usará estes para construir o seu código."
      9:
        image: "notes/hoc1_9.jpg"
        text: "À direita é o seu espaço de trabalho onde você vai arrastar blocos da caixa de ferramentas para construir o seu programa. Para excluir um bloco, arraste-o para o lixo no canto."
      10:
        image: "notes/hoc1_10.jpg"
        text: 'Cada bloco é uma instrução. Se você arrastar um bloco "Avançar" para a sua área de trabalho e pressionar "Executar Programa", o pássaro se move um espaço para a frente no labirinto.'
      11:
        image: "notes/hoc1_11.jpg"
        text: "Para fazer mais de uma ação, você pode arrastar muitos blocos para o seu espaço de trabalho e anexá-los juntos. O pássaro vai fazer os comandos de cima para baixo."
      12:
        image: "notes/hoc1_12.jpg"
        text: 'Se você executa um programa e quer corrigi-lo e tentar novamente, pressione o botão "Refazer".'
      13:
        image: "notes/hoc1_13.jpg"
        text: "Vamos pegar esses porcos!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Oi, sou o JR! Cada equipe de carro de corrida precisa de cientistas de computador para ganhar. Eles analisam dados do carro para torná-lo mais rápido."
      2:
        image: "notes/stage5_2.jpg"
        text: "Estes quebra-cabeças, você vai ser um artista que desenha uma linha por trás deles, onde quer que vão."
      3:
        image: "notes/stage5_3.jpg"
        text: 'Este bloco diz "avançar por 100 pixels." Pixels são realmente minúsculos pontos na tela.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'Este bloco diz "Vire direita por 90 graus." Isso irá virar o seu artista na mesma quantidade que o bloco "turn" no quebra-cabeças do labirinto.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Click on the arrow in either of these blocks to change the amount the artist moves forward or turns. Play around to get familiar with these new blocks."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Hi, I'm Paola! In these puzzles, you're a farmer who has to get her field completely flat to start planting crops."
      2:
        image: "notes/stage9_2.jpg"
        text: "You have to help her remove all the piles of dirt and fill in all the holes."
      3:
        image: "notes/stage9_3.jpg"
        text: "The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shoveful of dirt to a hole."
      4:
        image: "notes/stage9_4.jpg"
        text: "The piles and holes are different sizes, so you have to tell the farmer how many shovelfuls to use."
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "Olá, sou Mark! Vamos aprender sobre repetições. Usando as repetições você pode dizer para um computador repetir qualquer conjunto de ações repetidamente, milhares ou mesmo milhões de vezes."
      2:
        image: "notes/hoc2_2.jpg"
        text: "Neste quebra-cabeça, queremos fazer o pássaro avançar 5 espaços para chegar ao porco."
      3:
        image: "notes/hoc2_3.jpg"
        text: 'Podemos usar o novo bloco "repetir" para nos ajudar.'
      4:
        image: "notes/hoc2_4.jpg"
        text: 'Em vez de arrastar 5 blocos "Avançar"...'
      5:
        image: "notes/hoc2_5.jpg"
        text: 'Podemos colocar o bloco "Avançar" dentro do bloco "repetir" e escrever um número no bloco para dizer quantas vezes repetir.'
      6:
        image: "notes/hoc2_6.jpg"
        text: 'E isto é importante: você pode colocar mais de um comando dentro de um bloco "repetir".'
      7:
        image: "notes/hoc2_7.jpg"
        text: 'Aproveite o uso do seu novo bloco "repetir"!'
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: 'Oi, eu sou o Chris. Antes de entrar para o Miami Heat, fui para Georgia Tecnologia para estudar Ciência da Computação. Vamos tentar o nosso novo bloco, o bloco "repetir até".'
      2:
        image: "notes/hoc3_2.jpg"
        text: "E se nós não soubermos quanto o pássaro teve que se mover para chegar ao porco?"
      3:
        image: "notes/hoc3_3.jpg"
        text: 'Se colocarmos um bloco "Avançar" dentro do bloco "repetir até", o pássaro vai seguir em frente ATÉ ele atingir o porco (ou se chocar contra uma parede).'
      4:
        image: "notes/hoc3_4.jpg"
        text: 'E isto é importante: tal como antes, podemos colocar vários blocos dentro do bloco "repetir até", e todos eles serão repetidos.'
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: 'Oi, eu sou o Bill! Vamos aprender um novo conceito fundamental: declarações "SE". É assim que computadores tomam decisões.'
      2:
        image: "notes/hoc4_2.jpg"
        text: 'Você usa a declaração "SE" com você mesmo todos os dias. Antes de você sair a cada manhã, você diz SE estiver chovendo lá fora, eu precisarei da minha jaqueta.'
      3:
        image: "notes/hoc4_3.jpg"
        text: "Então podemos dizer ao zumbi para verificar SE há caminho para a esquerda e, se ele encontrar um caminho para a esquerda, teremos que virar ele naquela direção."
      4:
        image: "notes/hoc4_4.jpg"
        text: 'Para escrever o código para isto, vamos arrastar o nosso bloco "SE" e colocar um bloco de "virar à esquerda" dentro dele.'
      5:
        image: "notes/hoc4_5.jpg"
        text: 'Agora, se colocarmos um bloco "Avançar" acima dele e um bloco "repetir" ao redor de tudo, cada vez que o zumbi se move, ele vai verificar se há um caminho para a esquerda e virar. O comando "repetir" é fundamental, para verificar se há uma virada a cada passo.'
      6:
        image: "notes/hoc4_6.jpg"
        text: 'Declarações "SE" são muito importantes para a ciência da computação. Um dos primeiros programas escrevi foi um jogo da velha, e havia uma instrução "SE" que dizia que SE a outra pessoa está prestes a ganhar, bloqueie o lugar que lhe permitiria ganhar.'
      7:
        image: "notes/hoc4_7.jpg"
        text: 'Divirta-se usando o bloco  "SE"!'
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: 'Oi, meu nome é Saloni. Eu uso a ciência da computação para ajudar a resolver problemas de saúde e medicina. Vamos aprender sobre o bloco "SE... SENÃO". É semelhante ao bloco "SE", mas tem uma parte extra no final que diz "SENÃO".'
      2:
        image: "notes/hoc5_2.jpg"
        text: 'Se eu colocar um bloco "Avançar" no local onde diz "fazer" e um bloco "Vire à esquerda" onde se diz "senão", significa que o zumbi vai escolher entre 2 opções. Se há um caminho pela frente, o zumbi vai avançar, e CASO CONTRÁRIO (não há um caminho em frente), o zumbi vai virar à esquerda.'
      3:
        image: "notes/hoc5_3.jpg"
        text: 'Como o bloco "SE", podemos colocar blocos "SE... SENÃO" dentro de um bloco "repetir" para que o zumbi continue se movendo e o bloco "SE... SENÃO" irá manter a verificação se há algum lugar para virar.'
      4:
        image: "notes/hoc5_4.jpg"
        text: "Agora coloque os zumbis onde eles devem ficar!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: "notes/stage13_2.jpg"
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: "notes/stage13_3.jpg"
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5 function" block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!" 
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block." 
      2:
        image: "notes/stage9_6.jpg"
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statment on the top is TRUE.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shoveful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "Parabéns! Com o último quebra-cabeça resolvido, você acabou de escrever o código que pode dizer a QUALQUER robô como encontrar o seu caminho através de um labirinto sem ramificação ou túnel de qualquer complexidade ou comprimento, seja um zumbi, um pássaro, uma missão a Marte ou até mesmo um carro sem motorista."
      2:
        image: "notes/hoc6_2.jpg"
        text: 'Os conceitos básicos que você usou são o coração de cada programa ou aplicativo que você alguma vez tentou.  Aprendemos sobre laços de repetição, declarações de repetições condicionais, declarações "SE" e declarações "SE... SENÃO".'
      3:
        image: "notes/hoc6_3.jpg"
        text: "Se você gostou de sua primeira hora de código, visite code.org para continuar sua educação em ciência da computação! Uma vez que você completar o nosso curso de 20 horas, você terá dominado o básico de programação e pode começar a aprender como escrever aplicativos de telefone, instruções de robô, jogos, tudo."
      4:
        image: "notes/hoc6_4.jpg"
        text: "A tecnologia está mudando tudo o que fazemos e não importa se você é jovem ou velho: programação é divertido, é criativo, e qualquer um pode aprender!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Transcrições em breve!"
