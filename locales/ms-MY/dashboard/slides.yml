"ms":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "Selamat datang ke hour of code pertama anda! Mari bersama ke dalam citarasa pengaturcaraan pertama anda."
      2:
        image: "notes/hoc1_2.jpg"
        text: "Kita akan menggunakan Blockly, bahasa pengaturcaraan visual di mana anda drag and drop blok untuk menulis kod."
      3:
        image: "notes/hoc1_3.jpg"
        text: 'Kebanyakan kod ditaip, tetapi Blockly adalah visual. Setiap blok sepadan dengan baris kod "real".'
      4:
        image: "notes/hoc1_4.jpg"
        text: "Anda akan mempelajari asas sains komputer, konsep yang digunakan di mana jua daripada membuat aplikasi hingga mengawal rover Marikh."
      5:
        image: "notes/hoc1_5.jpg"
        text: "Program ialah suatu set arahan untuk diikuti oleh komputer anda."
      6:
        image: "notes/hoc1_6.jpg"
        text: "Matlamat program pertama ialah supaya Angry Bird dapat melalui maze untuk melanggar Green Pig."
      7:
        image: "notes/hoc1_7.jpg"
        text: "Sebelah kiri ialah maze di mana atur cara anda berjalan. Arahan untuk setiap berada di bawah maze."
      8:
        image: "notes/hoc1_8.jpg"
        text: "Toolbox tengah mempunyai perintah untuk Angry Bird. Anda akan menggunakannya ini untuk membina kod."
      9:
        image: "notes/hoc1_9.jpg"
        text: "Di sebelah kanan merupakan ruang kerja anda di mana anda akan menyeret blok dari toolbox untuk membina atur cara. Untuk menghapuskan satu blok, seretkan ke dalam bakul sampah di sudut."
      10:
        image: "notes/hoc1_10.jpg"
        text: 'Setiap blok adalah satu arahan. Jika anda seret blok "maju" untuk ruang kerja anda dan tekan "Menjalankan Program", burung itu akan bergerak satu ruang pada maze.'
      11:
        image: "notes/hoc1_11.jpg"
        text: "Untuk melakukan lebih daripada satu tindakan, anda boleh seret banyak blok untuk ruang kerja anda dan sertakan mereka bersama-sama. Burung itu akan melakukan arahan dari atas ke bawah."
      12:
        image: "notes/hoc1_12.jpg"
        text: 'Jika anda menjalankan aturcara dan ingin membetulkan dan mencubanya lagi, tekan butang "Reset".'
      13:
        image: "notes/hoc1_13.jpg"
        text: "Mari dapatkan pig itu!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Hi, I'm JR! Every race car team need computer scientists to win. They analyze data from the car to make it go faster."
      2:
        image: "notes/stage5_2.jpg"
        text: "In these puzzles, you'll be an artist that draws a line behind them everywhere they go."
      3:
        image: "notes/stage5_3.jpg"
        text: 'This block says "move forward by 100 pixels." Pixels are just really tiny dots on your screen.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'This block says "turn right by 90 degrees." This will turn your artist the same amount as the "turn" blocks in the maze puzzles.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Click on the arrow in either of these blocks to change the amount the artist moves forward or turns. Play around to get familiar with these new blocks."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Hi, I'm Paola! In these puzzles, you're a farmer who has to get her field completely flat to start planting crops."
      2:
        image: "notes/stage9_2.jpg"
        text: "You have to help her remove all the piles of dirt and fill in all the holes."
      3:
        image: "notes/stage9_3.jpg"
        text: "The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shoveful of dirt to a hole."
      4:
        image: "notes/stage9_4.jpg"
        text: "The piles and holes are different sizes, so you have to tell the farmer how many shovelfuls to use."
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "Hi, saya Mark! Mari belajar tentang gelung. Menggunakan gelung anda boleh memberitahu komputer untuk mengulangi mana-mana set tindakan berulang kali, beribu-ribu atau malah berbilion-bilion kali."
      2:
        image: "notes/hoc2_2.jpg"
        text: "Dalam puzzle ini, kita ingin menjadikan burung untuk bergerak 5 ruang untuk dapat sampai ke pig."
      3:
        image: "notes/hoc2_3.jpg"
        text: 'Kita boleh gunakan "ulang" blok baru untuk bantu keluar.'
      4:
        image: "notes/hoc2_4.jpg"
        text: 'Berbanding mengheret keluar 5 "maju" blok...'
      5:
        image: "notes/hoc2_5.jpg"
        text: 'Kita boleh letak blok "maju" dalam blok "ulang" dan tulis nombor dalam blok untuk memberitahu berapa kali ulangan.'
      6:
        image: "notes/hoc2_6.jpg"
        text: 'Ini adalah penting: anda boleh memasukan lebih dari satu arahan dalam blok "ulang".'
      7:
        image: "notes/hoc2_7.jpg"
        text: 'Berseronok dengan menggunakan blok "ulang" baru anda!'
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: 'Hi, saya Chris, sebelum menyertai Miami Heat, saya pergi ke Georgia Tech untuk belajar Sains Komputer. Mari cuba blok baru kita, blok "ulang hingga".'
      2:
        image: "notes/hoc3_2.jpg"
        text: "Apa kata jika kita tidak tahun sejauh mana burung itu perlu bergerak untuk dapat sampai kepada pig?"
      3:
        image: "notes/hoc3_3.jpg"
        text: 'Jika kita letakkan "maju" dalam blok "ulang hingga", burung itu akan bergerak ke depan HINGGA ia mencapai pig (atau melanggar ke dinding).'
      4:
        image: "notes/hoc3_4.jpg"
        text: 'And this is important: just like before, we can put multiple blocks inside the "repeat until" block, and they will all be repeated.'
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: 'Hai, saya Bill! Mari belajar konsep asas baru: Penyata "Jika". Ianya merupakan bagaimana komputer membuat keputusan.'
      2:
        image: "notes/hoc4_2.jpg"
        text: 'Anda sendiri menggunakan penyata "Jika" setiap hari. Sebelum anda pergi ke luar setiap pagi, anda kata JIKA hujan di luar, saya perlu pakai jaket saya.'
      3:
        image: "notes/hoc4_3.jpg"
        text: "Kita boleh memberitahu zombie untuk menyemak jika terdapat laluan ke kiri, dan jika dia mendapati laluan di sebelah kiri, kita boleh membuatkan dia berpaling arah itu."
      4:
        image: "notes/hoc4_4.jpg"
        text: 'Untuk menulis kod ini, mari kita mengheret blok "Jika" dan letakkan blok "belok kiri" di dalamnya.'
      5:
        image: "notes/hoc4_5.jpg"
        text: 'Sekarang, jika kita letakkan blok "gerak ke hadapan" di atas dan satu blok "ulang" disekeliling semua, zombie akan mengenalpasti  jika terdapat laluan untuk ke kiri atau ke kanan setiap kali dia bergerak. Arahan "ulang" adalah  kritikal untuk mengenal setiap belokan dalam langkah.'
      6:
        image: "notes/hoc4_6.jpg"
        text: "Penyata Jika adalah amat penting dalam sains komputer. Satu daripada program pertama yang saya tulis ialah permainan tic-tac-toe, dan terdapat penyata Jika yang menyatakan JIKA orang lain akan menang, block tempat yang membolehkan mereka menang."
      7:
        image: "notes/hoc4_7.jpg"
        text: 'Berseronok menggunakan blok "Jika"!'
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: 'Hai, nama saya Saloni. Saya menggunakan sains komputer untuk membantu menyelesaikan masalah dalam perubatan dan kesihatan. Mari belajar mengenai blok "jika selain". ianya kelihat seperti blok "jika", tetapi ianya mempunyai bahagian ekstra di penghujung yang menyatakan "selain".'
      2:
        image: "notes/hoc5_2.jpg"
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: "notes/hoc5_3.jpg"
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: "notes/hoc5_4.jpg"
        text: "Now, get those zombies where they belong!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: "notes/stage13_2.jpg"
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: "notes/stage13_3.jpg"
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5 function" block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: "notes/stage9_6.jpg"
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statment on the top is TRUE.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shoveful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: "notes/hoc6_2.jpg"
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: "notes/hoc6_3.jpg"
        text: "If you liked your first hour of code, visit code.org to continue your education into computer science! Once you complete our 20 hour course, you'll have mastered the basics of programming, and can start learning how to write phone apps, robot instructions, games, you name it."
      4:
        image: "notes/hoc6_4.jpg"
        text: "Technology is changing everything we do and it doesn't matter if you're young or old: programming is fun, it's creative, and anyone can learn!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Show notes coming soon!"
