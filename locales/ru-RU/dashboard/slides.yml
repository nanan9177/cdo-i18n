"ru":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "Добро пожаловать на ваш первый час кода! Приглашаем Вас погрузиться в первый урок программирования."
      2:
        image: "notes/hoc1_2.jpg"
        text: "Мы будем использовать Blockly, визуальный язык программирования, где для создания программы Вы будете просто перетаскивать специальные блоки."
      3:
        image: "notes/hoc1_3.jpg"
        text: "Большинство программ состоят из строк кода, но Blockly визуальный язык программирования. Каждый блок - это строка «реального» кода."
      4:
        image: "notes/hoc1_4.jpg"
        text: "Вы получите знания об основах компьютерных технологий, понятий, которые используются и для создания простых программ, и для контроля роботов на Марсе."
      5:
        image: "notes/hoc1_5.jpg"
        text: "Программа - это набор инструкций или команд, по которым должен работать Ваш компьютер."
      6:
        image: "notes/hoc1_6.jpg"
        text: "Цель Вашей первой программы: Angry Bird летит к Green Pig по лабиринту и ударяет ее."
      7:
        image: "notes/hoc1_7.jpg"
        text: "Левая часть экрана - это лабиринт, в котором будет запущена Ваша программа. Инструкции для каждой головоломки написаны ниже лабиринта."
      8:
        image: "notes/hoc1_8.jpg"
        text: 'Средняя часть экрана - это панель инструментов с командами для управления Angry Bird. Вы будете использовать их для создания "кода" программы.'
      9:
        image: "notes/hoc1_9.jpg"
        text: "Справа на экране — рабочее пространство, куда Вы будете перетаскивать блоки из средней панели инструментов для создания программы. Чтобы удалить блок, перетащите его в корзину в углу."
      10:
        image: "notes/hoc1_10.jpg"
        text: "Каждый блок - это одна инструкция. Если вы перетащите блок «двигаться вперед» в рабочую область и нажмете кнопку «Запуск программы», птичка продвинется в лабиринте на один квадратик вперед."
      11:
        image: "notes/hoc1_11.jpg"
        text: "Чтобы сделать более одного действия, можно перетащить несколько блоков в рабочую область и составить их в один набор. Птичка будет выполнять все действия, указанные в командах сверху вниз."
      12:
        image: "notes/hoc1_12.jpg"
        text: "Если Вы запустили программу, а затем хотите что-то исправит и снова ее запустить, нажмите кнопку «Сброс»."
      13:
        image: "notes/hoc1_13.jpg"
        text: "Давайте зададим этим хрюшкам!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Hi, I'm JR! Every race car team need computer scientists to win. They analyze data from the car to make it go faster."
      2:
        image: "notes/stage5_2.jpg"
        text: "In these puzzles, you'll be an artist that draws a line behind them everywhere they go."
      3:
        image: "notes/stage5_3.jpg"
        text: 'This block says "move forward by 100 pixels." Pixels are just really tiny dots on your screen.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'This block says "turn right by 90 degrees." This will turn your artist the same amount as the "turn" blocks in the maze puzzles.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Click on the arrow in either of these blocks to change the amount the artist moves forward or turns. Play around to get familiar with these new blocks."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Hi, I'm Paola! In these puzzles, you're a farmer who has to get her field completely flat to start planting crops."
      2:
        image: "notes/stage9_2.jpg"
        text: "You have to help her remove all the piles of dirt and fill in all the holes."
      3:
        image: "notes/stage9_3.jpg"
        text: "The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shoveful of dirt to a hole."
      4:
        image: "notes/stage9_4.jpg"
        text: "The piles and holes are different sizes, so you have to tell the farmer how many shovelfuls to use."
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "Привет, меня зовут Марк! Давайте узнаем что такое циклы в программировании. С помощью цикла вы можете сказать компьютеру, чтобы он повторил любой набор команд снова и снова, тысячи или даже миллиарды раз."
      2:
        image: "notes/hoc2_2.jpg"
        text: "В этой головоломке мы хотим сделать так, чтобы птичка двигалась вперед на 5 клеток пазла и добралась до хрюшки."
      3:
        image: "notes/hoc2_3.jpg"
        text: "Мы можем использовать новый блок «повторить», чтобы упростить создание программы."
      4:
        image: "notes/hoc2_4.jpg"
        text: "Вместо перетаскивания 5-ти блоков «двигаться вперед»..."
      5:
        image: "notes/hoc2_5.jpg"
        text: "Мы можем поставить блок «двигаться вперед» внутри блока «повторить» и написать цифру в блоке - количество необходимых повторений."
      6:
        image: "notes/hoc2_6.jpg"
        text: "И это важно: вы можете вставить более одной команды внутри блока «повторить»."
      7:
        image: "notes/hoc2_7.jpg"
        text: "Наслаждайтесь, используя новый изученный блок «повторить»!"
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: |-
          Hi, I'm Chris. Before joining the Miami Heat, I went to Georgia Tech to study Computer Science. Let's try our new block, the "repeat until" block.
      2:
        image: "notes/hoc3_2.jpg"
        text: "What if we didn't know how far the bird had to move to get to the pig?"
      3:
        image: "notes/hoc3_3.jpg"
        text: 'If we put a "move forward" block inside the "repeat until" block, the bird will move forward UNTIL it reaches the pig (or crashes into a wall).'
      4:
        image: "notes/hoc3_4.jpg"
        text: 'And this is important: just like before, we can put multiple blocks inside the "repeat until" block, and they will all be repeated.'
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: "Привет! Меня зовут Билл! Давайте узнаем новое фундаментальное понятие: команду «Если». Эта команда управляет тем, как компьютер принимает решения."
      2:
        image: "notes/hoc4_2.jpg"
        text: |-
          You use "If" statements yourself everday. Before you go outside each morning, you say IF it's raining outside, I need to wear my jacket.
      3:
        image: "notes/hoc4_3.jpg"
        text: "We can tell the zombie to check IF there's path to the left, and if he finds a path to the left, we can have him turn in that direction."
      4:
        image: "notes/hoc4_4.jpg"
        text: |-
          To write the code for this, let's drag out our "if" block and put a "turn left" block inside it.
      5:
        image: "notes/hoc4_5.jpg"
        text: |-
          Now, if we put a "move forward" block above it and a "repeat" block around everything, each time the zombie moves, he'll check if there's a path to the left and turn. The "repeat" command is critical, to check for a turn at every step.
      6:
        image: "notes/hoc4_6.jpg"
        text: "If statements are really important in computer science. One of the first programs I wrote was a tic-tac-toe game, and there was a If statement that said IF the other person is about to win, block the spot that lets them win."
      7:
        image: "notes/hoc4_7.jpg"
        text: "Просто используйте блок «Если»!"
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: "notes/hoc5_2.jpg"
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: "notes/hoc5_3.jpg"
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: "notes/hoc5_4.jpg"
        text: "Now, get those zombies where they belong!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: "notes/stage13_2.jpg"
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: "notes/stage13_3.jpg"
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5 function" block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!" 
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block." 
      2:
        image: "notes/stage9_6.jpg"
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statment on the top is TRUE.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shoveful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: "notes/hoc6_2.jpg"
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: "notes/hoc6_3.jpg"
        text: "If you liked your first hour of code, visit code.org to continue your education into computer science! Once you complete our 20 hour course, you'll have mastered the basics of programming, and can start learning how to write phone apps, robot instructions, games, you name it."
      4:
        image: "notes/hoc6_4.jpg"
        text: "Technology is changing everything we do and it doesn't matter if you're young or old: programming is fun, it's creative, and anyone can learn!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Show notes coming soon!"
