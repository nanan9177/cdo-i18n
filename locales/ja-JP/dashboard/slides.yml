"ja":
  slides:
    maze_intro:
      1:
        image: "notes/hoc1_1.jpg"
        text: "初めての「コードの時間」へようこそ！初体験のプログラミングに今すぐ飛び込みましょう。"
      2:
        image: "notes/hoc1_2.jpg"
        text: "我々はブロックリーを使っています。ブロックリーとは、ブロックをドラッグやドロップしてコードを記述する視覚的なプログラミング言語のことです。"
      3:
        image: "notes/hoc1_3.jpg"
        text: "ほとんどのコードは文字で書かれますが、ブロックリーは視覚的です。それぞれのブロックは「本物の」コードの各行に対応します。"
      4:
        image: "notes/hoc1_4.jpg"
        text: "アプリを作ることから火星探査車をコントロールすることまで、いろいろなところで使われるコンピューター科学の基礎を学習します。"
      5:
        image: "notes/hoc1_5.jpg"
        text: "プログラムはあなたのコンピュータを動かす命令の集まりです。"
      6:
        image: "notes/hoc1_6.jpg"
        text: "あなたの最初のプログラムの目標は、アングリーバードに迷路を通り抜けて緑のブタにぶつけさせることです。"
      7:
        image: "notes/hoc1_7.jpg"
        text: "左側はプログラムを実行させる迷路です。それぞれのパズルの説明は迷路の下にあります。"
      8:
        image: "notes/hoc1_8.jpg"
        text: "真ん中のツールボックスにはアングリーバードのコマンドがあります。これらはあなたのコードを組み立てるのに使います。"
      9:
        image: "notes/hoc1_9.jpg"
        text: "右には、ブロックをツールボックスからドラッグしてプログラムを組み立てるためのワークスペースがあります。ブロックを削除するには、隅にあるゴミ箱へドラッグします。"
      10:
        image: "notes/hoc1_10.jpg"
        text: "ブロックはそれぞれ、1つの命令を表します。「前に進む」ブロックをワークスペースにドラッグして「プログラムの実行」をクリックすると、鳥は迷路の中を1マス進みます。"
      11:
        image: "notes/hoc1_11.jpg"
        text: "1つ以上の動作をするには、複数のブロックをワークスペースにドラッグして、それらをつなぎ合わせます。鳥は上から順に、置かれたコマンド（ブロック）の動作を行います。"
      12:
        image: "notes/hoc1_12.jpg"
        text: "プログラムを実行後、修正してやり直したいときは、「リセット」ボタンをクリックします。"
      13:
        image: "notes/hoc1_13.jpg"
        text: "ブタを捕まえに行こう！"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "やあ、私はJR！レーシングカーのチームにはコンピュータ科学者が必要です。彼らは車をより速く走らせるためにデータを分析します。"
      2:
        image: "notes/stage5_2.jpg"
        text: "これらのパズルでは、あなたは芸術家になってどこでも行った後ろに線を描きます。"
      3:
        image: "notes/stage5_3.jpg"
        text: "このブロックは「100ピクセル前方に移動」です。ピクセルとは、あなたの画面の本当に小さな点のことです。"
      4:
        image: "notes/stage5_4.jpg"
        text: "このブロックは「右に90度回転」です。これは、迷路パズルでの回転ブロックと同じように、あなたの芸術家が回ります。"
      5:
        image: "notes/stage5_5.jpg"
        text: "芸術家が前に行く距離や回る角度を変えるために、これらのブロックの矢印をクリックしてください。新しいブロックに慣れるために遊んでみよう。"
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "こんにちは、私はパオラです！これらのパズルでは、あなたは農家になって作物を植えるために畑を平らにしなければなりません。"
      2:
        image: "notes/stage9_2.jpg"
        text: "あなたは彼女がすべての土の山を取り除いて、すべての穴を埋めるのを手伝わなければなりません。"
      3:
        image: "notes/stage9_3.jpg"
        text: "The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shovelful of dirt to a hole."
      4:
        image: "notes/stage9_4.jpg"
        text: "泥山や穴は大きさが違うので、あなたは農民にシャベルを何回使えばいいか教えなければなりません。"
    loop_times:
      1:
        image: "notes/hoc2_1.jpg"
        text: "こんにちは、私はマーク！繰り返しについて学びましょう。繰り返しを使うと、操作の集まりを何度も何度も、何千回でも何億回でも繰り返すようにコンピュータに伝えることができます。"
      2:
        image: "notes/hoc2_2.jpg"
        text: "このパズルでは、鳥がブタのところに行くように鳥を5だけ前に移動させましょう。"
      3:
        image: "notes/hoc2_3.jpg"
        text: "私たちの助けになる新しい「繰り返し」ブロックを使うことができます。"
      4:
        image: "notes/hoc2_4.jpg"
        text: "5回「前方に移動する」ブロックをドラッグしてくる代わりに・・・"
      5:
        image: "notes/hoc2_5.jpg"
        text: "「前方に移動する」ブロックを「繰り返し」ブロックの中に置いて、何回繰り返すのかブロックに数を書くことができます。"
      6:
        image: "notes/hoc2_6.jpg"
        text: "重要なこと：「繰り返し」ブロックの内には1つ以上の命令を置くことができます。"
      7:
        image: "notes/hoc2_7.jpg"
        text: "新しい「繰り返し」ブロックを使って楽しもう！"
    loop_until:
      1:
        image: "notes/hoc3_1.jpg"
        text: "こんにちは、私はクリスです。マイアミ・ヒートに参加する前は、ジョージア工科大学へコンピュータサイエンスを勉強しに行ってました。私たちの新しいブロック「まで繰り返し」ブロックを試してみましょう。"
      2:
        image: "notes/hoc3_2.jpg"
        text: "鳥がブタのところまで移動するのにどれだけ遠いかわからなかったらどうしましょうか？"
      3:
        image: "notes/hoc3_3.jpg"
        text: "「まで繰り返し」ブロックの中に「前方に移動する」ブロックを置けば、鳥はブタのところへ行く（または壁に当たってしまう）まで前に進みます。"
      4:
        image: "notes/hoc3_4.jpg"
        text: "重要なこと：これまでのように、「まで繰り返し」ブロック内に複数のブロックを置くことができて、すべて繰り返されます。"
    if:
      1:
        image: "notes/hoc4_1.jpg"
        text: "こんにちは、私はビルです。新しい基本的な概念「もし」の文を学びましょう。これは、コンピューターが何かを決めるときに使われます。"
      2:
        image: "notes/hoc4_2.jpg"
        text: "「もし」の文は日常生活でも使います。朝外に出る前、「もし」外が雨なら、ジャケットを着る必要がある、という風に。"
      3:
        image: "notes/hoc4_3.jpg"
        text: "左側に道があるかをゾンビに聞いて、もし(If)左側に道があれば、その方向に曲がるようゾンビに指示します。"
      4:
        image: "notes/hoc4_4.jpg"
        text: "このコードを書くには、「もし」のブロックを引き出した後、「左に曲がれ」のブロックをその中に入れます。"
      5:
        image: "notes/hoc4_5.jpg"
        text: "では、「前に進め」ブロックをその上に置き、「くり返す」ブロックをすべての周りに置いてみましょう。ゾンビが前に進むたびに左側に道があるかをチェックし、そして曲がります。「くり返す」の命令は重要で、一歩進むごとに曲がるかどうかをチェックします。"
      6:
        image: "notes/hoc4_6.jpg"
        text: "「もし」の文はコンピュータサイエンスではとても重要です。私が最初に作ったプログラムは「三目並べ」ですが、その中に、「もし相手が勝ちそうになったら、相手のマークが３つ並ばないようブロックせよ」、という「もし」の文がありました。"
      7:
        image: "notes/hoc4_7.jpg"
        text: "「もし」ブロックを使って遊んでみましょう。"
    if_else:
      1:
        image: "notes/hoc5_1.jpg"
        text: "こんにちは、私の名前はサローニです。私は健康や薬についての問題を解決するため、コンピュータサイエンスを使います。「もし～でなければ」ブロックを勉強しましょう。「もし」ブロックに似ていますが、「でなければ」というのがついています。"
      2:
        image: "notes/hoc5_2.jpg"
        text: "「せよ」と書かれたところに「前に進め」ブロックを配置し、「でなければ」と書かれたところに「左に曲がれ」を配置すると、ゾンビは２つの選択肢を持つことになります。前方に道があればゾンビは前に進み、でなければ（前方に道がなければ）ゾンビは左に曲がります。"
      3:
        image: "notes/hoc5_3.jpg"
        text: "「もし」ブロックと同様に、「もし～でなければ」ブロックを「繰り返す」ブロックの中に入れると、ゾンビは動き続け、「もし～でなければ」ブロックによって曲がれるかどうかをチェックし続けます。"
      4:
        image: "notes/hoc5_4.jpg"
        text: "では、ゾンビを元の場所に戻してやりましょう。"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "こんにちは、私はブリナ。インスタグラムで働くエンジニアです。「関数」とは、繰り返し使うコードの塊のことで、毎回同じコードを書く代わりに、一つのブロックとして使うことができます。"
      2:
        image: "notes/stage13_2.jpg"
        text: "関数をどのように定義するか勉強しましょう。関数の定義には、角に星印がついています。関数の名前は一番上に書かれています。"
      3:
        image: "notes/stage13_3.jpg"
        text: "定義の中に入るブロックは何をするかを私たちに告げます。そうですこの関数定義は『５を塗りつぶす」と呼ばれ、そして「繰り返し」ブロックと「塗りつぶし」ブロックで成り立っています。"
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5" function block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: "notes/stage9_6.jpg"
        text: |
          ステートメントの上がTrueである限り「間ブロック」の中に何をいれても動きます。
          
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shovelful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "こんにちは、私はトリーナとピクサーで働いています。シュレックを含むたくさんの映画作りに携わってきました。"
      2:
        image: "notes/stage11_2.jpg"
        text: "これは私たちの新しい「カウンター」ループです。アクションが何度も繰り返し実行され、アクションを毎回少しずつ変更を行うことができます。"
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "こんにちは、私は ジャネッテです。私は Zynga のエンジニアです。"
      2:
        image: "notes/stage15_2.jpg"
        text: |
          もし私たちがたくさんの三角形を描画したい、長さが違うサイズにしたかったらどうしますか？
          
          
      3:
        image: "notes/stage15_3.jpg"
        text: "手ですべてのコードを書くことができる、または私たちはパラメーターを持つ関数を使用できます。"
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "notes/hoc6_1.jpg"
        text: "Congratulations! With the last puzzle you solved, you just wrote code that can tell ANY robot how to find it's way through a non-branching maze or tunnel of any length, whether it's a zombie, a bird, a mars rover, or even a self-driving car."
      2:
        image: "notes/hoc6_2.jpg"
        text: "The basic concepts you used are at the heart of every program or app you'll ever try.  We learned about repeat loops, repeat until statements, if statements, and if else statements."
      3:
        image: "notes/hoc6_3.jpg"
        text: "If you liked your first hour of code, visit code.org to continue your education into computer science! Once you complete our 20 hour course, you'll have mastered the basics of programming, and can start learning how to write phone apps, robot instructions, games, you name it."
      4:
        image: "notes/hoc6_4.jpg"
        text: "Technology is changing everything we do and it doesn't matter if you're young or old: programming is fun, it's creative, and anyone can learn!"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Show notes coming soon!"
