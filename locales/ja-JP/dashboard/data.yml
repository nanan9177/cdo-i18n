"ja":
  data:
    script:
      name:
        20-hour:
          desc: "K-8(アメリカでの中学校）ではコンピューターサイエンスコースが紹介されている。"
          Unplug1: "ステージ1"
          Maze: "ステージ2"
          Unplug2: "ステージ3"
          Unplug3: "ステージ4"
          Artist: "ステージ5"
          Unplug4: "ステージ6"
          Artist2: "ステージ7"
          Unplug5: "ステージ8"
          Farmer: "ステージ9"
          Unplug6: "ステージ10"
          Artist3: "ステージ11"
          Unplug7: |
            ステージ12
            
            
          Farmer2: |
            ステージ13
            
            
          Unplug8: |
            ステージ14
            
          Artist4: |
            ステージ15
            
          Unplug9: "ステージ16"
          Farmer3: "ステージ17"
          Unplug10: "ステージ18"
          Artist5: "ステージ19"
          Unplug11: "ステージ20"
        Hour of Code:
          desc: "コードの時間（Hour of code）"
          Maze: "ステージ1"
        Edit Code:
          desc: "コードの編集"
          MazeEC: "ステージ1"
    game:
      name:
        Unplug1: "コンピューター・サイエンス入門"
        Maze: "迷路"
        Unplug2: "コンピュテーショナル・シンキング（コンピューターの様に考える）"
        Unplug3: "グラフ用紙のプログラミング"
        Artist: "アーティスト"
        Unplug4: "アルゴリズム"
        Artist2: "アーティスト 2"
        Unplug5: "機能:"
        Farmer: "農民"
        Unplug6: "条件"
        Artist3: "アーティスト 3"
        Unplug7: "作曲する"
        Farmer2: "農民 2"
        Unplug8: "抽象化"
        Artist4: "アーティスト 4"
        Unplug9: "プログラミングをリレーします。"
        Farmer3: "農民 3"
        Unplug10: "インターネット"
        Artist5: "アーティスト 5"
        Unplug11: "ラップアップ"
        MazeEC: "迷路"
    trophy:
      name:
        Bronze: "銅"
        Silver: "銀"
        Gold: "金"
    concept:
      description:
        sequence: "連続"
        if: "if ブロック"
        if_else: "If else ブロック"
        loop_times: "回数くり返しブロック"
        loop_until: "条件くり返しブロック"
        loop_while: "Whileブロック"
        loop_for: "Counterブロック"
        function: "関数"
        parameters: "パラメーターを持つ関数"
    level:
      instructions:
        maze_2_2: "いたずら豚を捕まえるのを手伝って！私が豚にたどり着くように、「前に進む」ブロックをいくつか重ねてから「プログラムの実行」を押しましょう。"
        maze_2_1: "このブタは私の羽を逆立てます。私が彼を見つけられるよう助けて！"
        maze_2_2_5: "道をたどって、おばかなブタのところへ案内してください。TNTを避けないと、羽が飛びます！"
        maze_2_3: "緑の悪者に私を案内して！（TNTに気をつけよう）"
        maze_2_4: "落ち着いて、そして悪いブタを見つけるのを助けてください。でないと私は怒るかもよ！"
        maze_2_5: "ブロックを2つだけ使って、緑のブタにたどり着ける方法があります。分かりますか？"
        maze_2_6: "ブロックを３つだけ使って私を緑の侵入者のところへ行かせてください。"
        maze_2_7: "一番少ない数のブロックを使ってこの悪いブタを追放するのを手伝ってください。1 つ以上の「繰り返し」ブロックを使用してください。"
        maze_2_8: "「移動」、「移動」、「曲がる」の3つのブロックが中に入った「繰り返し」ブロックを使って、この問題を解きましょう。"
        maze_2_9: "Ok, 新しい「まで繰り返し(Repeat until)」ブロックを試してください。私がムカつくブタに着くまで繰り返されます。"
        maze_2_10: "Ok、では 最後の１つになった練習です - これを 4 ブロックをだけ使って解決できますか？"
        maze_2_11: "親愛なる人。私ゾンビ。私は空腹。。。ヒマワリを取らないといけない。5つの ブロックだけで私をそこまで連れて行ける事ができますか？"
        maze_2_12: "Ok、 これは似ていますが、ちょっと違います。5つの ブロックだけでできますか？"
        maze_2_13: '新しい"if"ブロックを使っていつ曲がるかを私に決めさせてください。ヒント: あともう１つのブロックが必要です、でも私たちがどう設定しているかを学んでください、そうしたら次回はあなたができるようになります。'
        maze_2_14: 'Ok,　これは最後のパズルと同じです、でもどうやって"if"ブロックと"repeat"ブロックを一緒に使ったかをもう一度思い出す必要があります。'
        maze_2_15: 'ひまわりが欲しい！一番少ない数の"if"ブロックを使ってそこまで私を連れて行ってください'
        maze_2_16: "Ok,練習のためもう一度やりましょう ーそれほど違いはないけれど、 チャンパー達に気をつけて！"
        maze_2_17: '"If-else"ブロックは条件をチェックし、そして１つの事もしくは別の事をします。サンフラワーを私にゲットさせるためにこの新しいブロックを試してください。'
        maze_2_18: '"if-else"ブロックをもう一度練習するよ、 最初のトライでそれを正しくゲットできる？'
        maze_2_19: "ブロックをあと3つ追加してこの難しい迷路を解決する手助けをしてくれますか？もしそれができれば、長さに関係なくどんなカーブした道でも歩く事ができるようになります。"
        turtle_1_1: "こんにちは、私はアーティストです。あなたはどんなものでも描かせられるコードが書く事ができます。いくつかのブロックを使って絵の中にあるグレイの線の上にそって私に描写をさせてください。"
        turtle_1_2: "正方形を描きます。注: 新しい「色の設定」ブロックで選択することにより好きな色を使用してください。"
        turtle_1_3: "ブロックを３つだけ使用して正方形を作成します。"
        turtle_1_4: '毎回違う色を選択してくれる"random color"オプションをつかって、色の異なる側面をもつ三角形を描きましょう。ヒント：回転ブロックの回数をクリックして、どのくらいの距離で曲がるかを考慮して解決するひつようがあります。'
        turtle_1_5: "今、練習のために、三角形を描いて、そして封筒になるように正方形を描きます。"
        turtle_1_6: "どうやって、この三角形と正方形を描けるか解決できますか？ヒント：三角形を最初に、そして正方形を各前にどのくらい曲がればいいか考える。"
        turtle_1_7: "Ok、もう少し難しくしてみましょう  -もしこれらの緑のメガネを描けるか試しましょう。正方形はそれぞれの側面が100 ピクセルで 50 ピクセル離れています。緑色で描画くのを忘れないでね ！"
        turtle_1_8: "Ok,もしこのコードを実行 (または「実行する」それをしようとするキーを押します)したらら 何が起こるかを考えます。その後、描画が完了するように何回も繰り返します。色は毎回異なるようになります。"
        turtle_1_9: "円を描くのにどの数字がクエスチョンマーク（疑問符）に置き換えられるか考えられますか？"
        turtle_1_10: |
          
          よくできたね！あなたが描きたいものを何でもいいから描いてください。いくつかの楽しいアイデア： スティック図、雪片、またはスパイラル。また、新しい「設定幅」ブロックを試みてください。楽しんでね！
        turtle_4_1: "ブロック３つだけ （100 ピクセルのエッジ) で三角形を描くことができますか？ヒント:「リピート」のブロックを使用します。"
        turtle_4_2: "ブロックを1つ追加して、このパズルを完成させましょう。ヒント: 同じ2つの三角形を描くブロックが使えます。このブロックの間に「曲がる」を置きましょう。どのくらいで曲がるかは決める必要があります。"
        turtle_4_3: "Ok、これはあなたが書いた単一の三角形を描画するコードです。かわいい花を作るために「繰り返し」と「ターン」のブロックを追加できますか？"
        turtle_4_4: "これは前のパズルと同じコードです。でも各三角形を描画した後に36度だけ回転させました。何回これを繰り返す必要があるのでしょうか？（ヒント: 360度回転した後は完全な円ができます。）"
        turtle_4_5: "前回のパズルと同じコードです、ただ回転を36回繰り返しました。回転角度は何度にすればよいですか？(ヒント: 360 度回転すると描画は完全な円になります。）"
        turtle_4_6: "ブロックを３つだけ使用して、20 ピクセルのエッジを持つ正方形を描くことができますか？"
        turtle_4_7: "これは最後のパズルで正方形を描画したときのコードです。これを10繰り返して隣同士の正方形をはしごのように描画できますか？ヒント: ブロックをあと2 つ使うだけです。"
        turtle_4_8: "ここでは、前のパズルを解決します。図面を完成させるためにブロックをあと 2つ追加できますか？"
        turtle_4_9: "ここでは、前のパズルを解決します。図面を完成させるのに角度をどのくらいにする必要がありますか？（解くのに多少時間がかかるでしょう。)"
        turtle_4_10: "ここでは、前のパズルを解決します。図面を完成させるのに何回繰り返すひつようがあるでしょう？"
        turtle_4_11: "違うパターンを作るのに「ターン」と「繰り返し」ブロックの中の数字を変えてください。または、自分で残りのコードを自分の好きに書き変えて実験してみてください。"
        maze_karel_1_1: "こんにちは、私は農民です。私の土地を平らにするのに助けが必要です、そうすれば根付けの準備ができます。「削除」ブロックで私を泥山にうごかして「削除」ブロックで泥山を削除してください。"
        maze_karel_1_2: '次に、私を穴へ移動させて、"fill"ブロックを使って、TWOシャベル一杯の泥山で一杯にしてください。'
        maze_karel_1_3: "私を泥山へ動かしてください、そしてできる限り少ないブロックを使って、シャベル何杯分で泥山をなくせるかを教えてください。"
        maze_karel_1_4: "泥山４つすべてをなくすのを手助けしてくれますか？ヒント: できるなら、繰り返しブロックを使う。"
        maze_karel_1_5: '５杯分のシャベルでこれらすべての穴を埋めるのを手伝ってください。ヒント:"while"ブロックの中に「繰り返し」ブロックを置く事ができます。'
        maze_karel_1_6: '可能な限り少ないブロックを使用して、すべての泥山をなくしてください。"While"ブロック上のドロップダウン ・ メニューの新規オプションで、私が山の上に立っているか穴に立っているか教えてください。'
        maze_karel_1_7: "うわー、すごく深い穴を発見 ！何杯分の泥が必要なのかわかりません。泥が地面に達するまで埋めるようなプログラムを書くことができますか？"
        maze_karel_1_8: "できる限り少ない数のブロックで、田んぼの最後で穴を埋めるのを手伝ってください。"
        maze_karel_1_9: |
          これらすべての泥山をなくさせてください。できる限り少ない数のブロックを使ってください。
          ヒント："while"ブロックを使用してみてください。
        maze_karel_1_10: "遅くまで仕事をしていたので外は真っ暗、なので積み上がった山がどのくらい大きいのかわかりません。Whileブロックにあったようなオプションが今はもうありません。田んぼにそって私を移動させ、もし山があったらそれを削除してください。"
        maze_karel_1_11: '外はまだ暗いです。私を田んぼにそって移動してください。山があったらどかす、穴があったら埋める。ヒント:"if"ブロックでオプションのドロップ ダウン メニューを使用します。'
        turtle_2_1: "こんにちは。私ゾンビ アーティストです。私は描くのが大好き ！特別な色で正方形を描くを手伝ってください。重要な注記: ブロックはみんな同じですが、カテゴリーに分かれています。"
        turtle_2_2: "新しいブロックあなたにを定義させてくれる関数を使うところへようこそ ！新しい「正方形を加工」ブロックを試してみてください、「関数」カテゴリでは、小さな 50 x 50 緑色の四角形を描画するを発見しました。"
        turtle_2_3: |
          サイズが100、それぞれ120度離れている正方形を３つ描くのに「繰り返し」ブロック (「ループ」カテゴリ) を使用してください。そして３つのランダムな色でそれを描いてください。
          
        turtle_2_4: "今もっとファンシーにしようと思います。コードを変更して、100 ピクセルの幅、および各 10 度を離れている３６個の正方形を描いてください。ヒント：スライダーを使用すると早くできます。"
        turtle_2_5: "50、60、70、80、90ピクセル の辺を持つ正方形を描きます。「正方形を描く」関数を５回使用する必要があります。"
        turtle_2_6: 'Ok、 このプログラムは前回と同じ正方形を描画するのに、カウンターを使用します。あなたは正方形をカウンターと同じサイズにしたいです、ですので"Counter"ブロックを使ってください。ヒント： それは、変数カテゴリです。'
        turtle_2_7: "ブロックが無効なので、スパイラルを描画するプログラムが起動しません。「カウント」ブロック(ループ カテゴリ）と「カウンター」ブロックの(変数のカテゴリ) を使用して同じスパイラルを描画する新しいプログラムを作ってください."
        turtle_2_7_5: "新しい「描画雪だるま」関数 (関数カテゴリ)をつかって高さ 250 と 長さ100 の 雪だるまを2 つ描いてください。"
        turtle_2_8: "この 1 つは少しトリッキーです。「描画雪だるま」関数と新しい「飛躍」ブロック (アクション カテゴリ)を使用して。雪だるまを三つ、100 ピクセルを離れて、違う色を使って描画してください。"
        turtle_2_9: '" count "ループを使用して高さ70、80、90 100 110 の雪だるまの家族を描画してください。雪だるまわ、 60 ピクセル離してください。'
        turtle_2_10: "こちらはさまざまなスパイラルを試しにつくるコードです。回転量を変更するとどうなりますか。または、ループのランダムな色を設定しみたらどうなりますか。お好きなものを自由に描画してください。"
        maze_karel_2_1: "ブロックを使って、山を全て取り除き地面の穴を全て埋めるのを手伝って下さい。たくさんのブロックを使う代わりにループを使いましょう。ヒント: ループの中に別のループを入れることも出来ます。"
        maze_karel_2_2: '"5を埋める"と呼ばれるブロックを作りました。関数カテゴリです。この穴を埋めるために使つかってください。'
        maze_karel_2_3: '私はすべての穴を埋めるように新しい「5を埋める」 関数ブロックを使用します。関数のカテゴリから"5 を埋める"ブロックをドラッグする必要があります。'
        maze_karel_2_4: "七回シャベルする関数を作ってください。それを使ってすべての杭を削除することができますプログラムを書いてください。"
        maze_karel_2_5: |
          積山からシャベル６回分を取り除く新しい関数を作ってくださいそして、それを使ってすべての積山を平らにするのを手伝ってください。
          
        maze_karel_2_6: "「8 を埋める」、「8を削除する」の２つの新しい関数を使って、積山を平らにして、それを穴を埋めるのを手伝ってください。"
        maze_karel_2_7: |
          私のフィールドに牛が います！牛を避けながら積山を除去するのを助ける新しい関数を描いてください。新しい関数の中に全てのブロックを置きます。
          
          
        maze_karel_2_8: "この新しい関数を使用して、「牛を避けるため、1 を削除する」、すべての積山を削除するのを助けて。"
        maze_karel_2_9: |
          OK,ここでは縦に並ぶ４つの異なる泥を削除する関数です。ループ内にこの関数を入れてみてください、そうすればいくつかの新しいブロックだけを使えば泥の山を除去できます。
          
        maze_karel_2_10: "フィールドを越えて私を移動し、これら 2 つの関数を使用して、すべての積山を削除してすべての穴を埋めるのを手伝ってください。"
        turtle_3_1: "このパズルはどのように「正方形を描く」そして、「円を描く」関数がどう定義されるかを示してます。関数を定義づけはブロックそのものは実行されません。実際に正方形を描画する「正方形を描く」ブロックをプルする必要があります。"
        turtle_3_2: "例として「正方形を描く」関数を使用して、「三角形を描く」関数作成して、それを使用します。"
        turtle_3_3: "猫の周りに三角形のフェンス、そして牛の周りに正方形のフェンスを描いてください。ヒント: あなたがやりながらプログラムをテストしてください。"
        turtle_3_4: |
          ライオンの周りに家を描く事で「正方形を描く」と「三角形を描く」（そして他のいくつかのブロック）をどう使うかを把握しているかをみます。
          
        turtle_3_5: "今、新しい「家を描く」関数を作成し、それを使って猫の家を描きます。ヒント：「何かをする」ブロックを使い、新しい関数を作成する。ブロックに自分でつけた名前をテキスト入力します。"
        turtle_3_6: 'Using "draw a square" as an example, add an input named "length" to "draw a triangle". Then, draw triangles in different sizes. (Hint: click the star to add an input to a function)'
        turtle_3_7: 'Add an input named "length" to "draw a house" and build a big house for the elephant (with edges 150 pixels long)'
        turtle_3_8: 'Here are all of the blocks from the previous puzzle.  Modify "draw a house" so I end up at the bottom right corner after drawing a new house. Use this modified function to draw three houses.'
        turtle_3_9: 'Can you re-create the "draw a house" function without help? Try it, and then draw a row of houses.'
        turtle_3_10: "You've learned a lot! Now use it to draw whatever you want. Try to draw a star, or a spiral, or a fancy snowflake."
        maze_karel_debug_seq_1: |
          デバッグの世界へようこそ ！私のコードは正しく動作されません。植物を植える準備するのに私が自分の土地を平らにできるよう、問題を発見してそれを修正してくれませんか？
          
          
        maze_karel_debug_seq_2: |
          このプログラムで何が間違ですか？私が積山を除去できるようにするにはどう修正すればいいですか？
          
          
        maze_karel_debug_repeat: "私の土地がすてきに平らになるようこのプログラムをデバグしてください。"
        maze_karel_debug_while: "How should you change this program to help me fill the hole?"
        maze_karel_debug_if: "ヘルプ！私の土地が完璧に平らになるようこのプログラムを修正してください。"
        maze_karel_debug_if_else: |
          すべての積山を除去して穴を埋めルコとができるようこのプログラムをデバグしてください。
          
          
        maze_karel_debug_function_1: "What should you change about this program to help me remove all the piles?"
        maze_karel_debug_function_2: "Can you de-bug this program for me so I can make my field flat?"
        maze_karel_debug_function_3: "Edit this program so I'll remove all the piles on my field. "
        turtle_5_1: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_2: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_3: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_4: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_5: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        turtle_5_6: "このプログラムを実行してみてください、そして何が起こるかを参照し変更をしてください。それがどのように動作するかを理解できますか？(または削除し、完全に別の何かと交換)"
        maze_3_1: "I need to get to that pig! Type in a couple of calls to move(); so I can get my eggs back."
        maze_3_2: "Write me a program, so I can make it all the way to the pig."
        maze_3_3: "How should I get to the pig? Make sure I don't run into the box of TNT!"
        maze_3_4: "Argh! Write me a program that gets me around the TNT and to the pig."
      levelIncompleteError:
        maze_2_8: 'To solve this, find the pattern that repeats. Use a "repeat" block with these 3 blocks inside it: move, move, turn right.'
      other1StarError:
        maze_2_14: "「くり返し」ブロックの中に「もし」ブロックが必要です。分からなくなったら、1つ前のレベルに戻って、「もし」ブロックがどのように動くのかを確認しましょう。"
      tooFewBlocksMsg:
        maze_2_8: "この問題を解くには、くり返しのパターンを見つけます。「移動」、「移動」、「右に回転」の3つのブロックが入った「くり返し」ブロックを使いましょう。"
    video:
      name:
        maze_intro: "迷路入門"
        artist_intro: "アーティスト紹介"
        farmer_intro: "農夫のイントロ"
        loop_times: "回ブロックを繰り返す"
        loop_until: "までブロックを繰り返します"
        if: "もしもブロック"
        if_else: "もしも/他にブロック"
        function: "関数"
        loop_while: "の間にブロック"
        loop_for: "数える ブロック"
        parameters: "パラメーター付き関数"
        hoc_wrapup: "コードの時間終了"
        20_wrapup: |
          20 時間ラップアップ
          
