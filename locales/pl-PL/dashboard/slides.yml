"pl":
  slides:
    maze_intro:
      1:
        image: "uwagi/hoc1_1.jpg"
        text: "Witaj podczas swojej pierwszej Godziny Kodowania! Zanurkuj w swoją pierwszą przygodę z programowaniem."
      2:
        image: "uwagi/hoc1_2.jpg"
        text: "Będziemy używać Blockly, wizualnego języka programowania, który umożliwia pisanie kodu za pomocą przeciągania i upuszczania bloków."
      3:
        image: "uwagi/hoc1_3.jpg"
        text: "Większość kodów jest pisana, ale Blockly jest wizualny. Każdy blok odpowiada rzeczywistej linii kodu."
      4:
        image: "uwagi/hoc1_4.jpg"
        text: "Nauczysz się podstaw informatyki, pojęć, które są używane w wielu sytuacjach, od tworzenia aplikacji komputerowych po kierowanie pojazdem na Marsie."
      5:
        image: "uwagi/hoc1_5.jpg"
        text: "Program jest zestawem poleceń, które ma wykonać komputer."
      6:
        image: "uwagi/hoc1_6.jpg"
        text: "Twój pierwszy program ma spowodować, że Angry Bird trafi w labiryncie na Zieloną Świnkę."
      7:
        image: "uwagi/hoc1_7.jpg"
        text: "Po lewej stronie znajduje się labirynt, w którym ma być uruchomiony Twój program. Polecenia dla każdej łamigłówki znajdują obok labiryntu."
      8:
        image: "uwagi/hoc1_8.jpg"
        text: "Przybornik pośrodku ekranu zawiera polecenia dla Angry Bird. Możesz ich użyć do zbudowania swojego programu."
      9:
        image: "uwagi/hoc1_9.jpg"
        text: "Po prawej stronie znajduje się Twój obszar roboczy, do którego możesz przenosić bloki z przybornika, by budować swój program. Aby usunąć blok z programu, przeciągnij go do kosza w rogu po prawej stronie."
      10:
        image: "uwagi/hoc1_10.jpg"
        text: "Każdy blok jest instrukcją. Jeśli przeciągniesz blok idź do przodu do obszaru roboczego i naciśniesz przycisk Uruchom program, to ptak przesunie się o jedno pole w labiryncie."
      11:
        image: "uwagi/hoc1_11.jpg"
        text: "Aby wykonać więcej niż jeden ruch, możesz przeciągnąć wiele bloków do swojego obszaru roboczego i połączyć je ze sobą. Angry Bird wykona wszystkie polecenia od góry do dołu."
      12:
        image: "uwagi/hoc1_12.jpg"
        text: "Jeśli uruchomiłeś program i chcesz go później poprawić i uruchomić ponownie, to naciśnij przycisk Reset."
      13:
        image: "uwagi/hoc1_13.jpg"
        text: "Dopadnijmy te świnie!"
    artist_intro:
      1:
        image: "notes/stage5_1.jpg"
        text: "Hi, I'm JR! Every race car team need computer scientists to win. They analyze data from the car to make it go faster."
      2:
        image: "notes/stage5_2.jpg"
        text: "In these puzzles, you'll be an artist that draws a line behind them everywhere they go."
      3:
        image: "notes/stage5_3.jpg"
        text: 'This block says "move forward by 100 pixels." Pixels are just really tiny dots on your screen.'
      4:
        image: "notes/stage5_4.jpg"
        text: 'This block says "turn right by 90 degrees." This will turn your artist the same amount as the "turn" blocks in the maze puzzles.'
      5:
        image: "notes/stage5_5.jpg"
        text: "Click on the arrow in either of these blocks to change the amount the artist moves forward or turns. Play around to get familiar with these new blocks."
    farmer_intro:
      1:
        image: "notes/stage9_1.jpg"
        text: "Hi, I'm Paola! In these puzzles, you're a farmer who has to get her field completely flat to start planting crops."
      2:
        image: "notes/stage9_2.jpg"
        text: "You have to help her remove all the piles of dirt and fill in all the holes."
      3:
        image: "notes/stage9_3.jpg"
        text: "The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shoveful of dirt to a hole."
      4:
        image: "notes/stage9_4.jpg"
        text: "The piles and holes are different sizes, so you have to tell the farmer how many shovelfuls to use."
    loop_times:
      1:
        image: "uwagi/hoc2_1.jpg"
        text: "Cześć, jestem Mark! Zaczynamy naukę o pętlach. Za pomocą pętli można powiedzieć komputerowi powtarzaj każdy zestaw działań w kółko, tysiące lub nawet miliardy razy."
      2:
        image: "uwagi/hoc2_2.jpg"
        text: "W tej łamigłówce chcemy, aby ptak przesunął się 5 pól do przodu, by dosięgnąć świnkę."
      3:
        image: "uwagi/hoc2_3.jpg"
        text: "Możemy użyć nowego bloku powtórz, by sobie pomóc."
      4:
        image: "uwagi/hoc2_4.jpg"
        text: "Zamiast 5 razy przeciągać blok idź do przodu..."
      5:
        image: "uwagi/hoc2_5.jpg"
        text: "Możemy umieścić blok idź do przodu wewnątrz bloku powtórz i wpisać w nim liczbę powtórzeń, aby określić, ile razy ma powtórzyć."
      6:
        image: "uwagi/hoc2_6.jpg"
        text: "Ważna uwaga: Możesz umieścić więcej niż jedno polecenie w bloku powtórz."
      7:
        image: "uwagi/hoc2_7.jpg"
        text: "Miłego korzystania z Twojego nowego bloku powtórz!"
    loop_until:
      1:
        image: "uwagi/hoc3_1.jpg"
        text: "Hi, jestem Chris. Przed dołączeniem do Miami Heat, wstąpiłem na Georgia Tech, by studiować informatykę. Spróbujmy użyć naszego nowego bloku powtórz aż do."
      2:
        image: "uwagi/hoc3_2.jpg"
        text: "Co zrobić, jeśli nie wiedzieliśmy, jak daleko ten ptak miał przenieść się, by dosięgnąć świnkę?"
      3:
        image: "uwagi/hoc3_3.jpg"
        text: "Jeśli umieścimy blok idź do przodu wewnątrz bloku powtórz dopóki, wtedy ptak będzie poruszał się naprzód, aż dotrze do świni (lub zderzy się ze ścianą)."
      4:
        image: "uwagi/hoc3_4.jpg"
        text: "I to jest ważne: tak jak wcześniej, możemy umieścić wiele bloków wewnątrz bloku powtórz aż do, i wszystkie będą powtarzane."
    if:
      1:
        image: "uwagi/hoc4_1.jpg"
        text: "Witam, jestem Bill! Nauczmy się nowego podstawowego pojęcia: instrukcji jeśli. To dzięki nim komputery podejmują decyzje."
      2:
        image: "uwagi/hoc4_2.jpg"
        text: "Bloku jeśli używasz codziennie. Przed wyjściem z domu każdego poranka, mówisz jeśli pada na zewnątrz, to muszę założyć kurtkę."
      3:
        image: "uwagi/hoc4_3.jpg"
        text: "Możemy powiedzieć, zombie, by sprawdził, czy istnieje droga w lewo, i jeśli znajdzie drogę w lewo, możemy pozwolić mu skręcić w tę stronę."
      4:
        image: "uwagi/hoc4_4.jpg"
        text: "Aby napisać kod dla tego, przeciągnijmy nasz blok jeśli i umieśćmy w nim blok obróć się w lewo."
      5:
        image: "uwagi/hoc4_5.jpg"
        text: "Teraz, jeśli umieścimy blok idź do przodu nad nim i blokiem powtórz obejmiemy wszystko, wtedy za każdym razem, gdy zombie poruszy się, będzie sprawdzał, czy istnieje droga w lewo i ewentualnie skręcał. Polecenie powtórz jest ważne, by sprawdzać za każdym razem, czy można skręcić."
      6:
        image: "uwagi/hoc4_6.jpg"
        text: "Instrukcje jeśli są bardzo ważne w informatyce. Jednym z pierwszych programów, jakie napisałem, była gra w kółko i krzyżyk, i była w nim instrukcja jeśli, której zadaniem było: jeśli przeciwnik ma zaraz wygrać, to zablokuj pole, które dałoby mu wygraną."
      7:
        image: "uwagi/hoc4_7.jpg"
        text: "Miłej zabawy przy korzystaniu z bloku jeśli!"
    if_else:
      1:
        image: "uwagi/hoc5_1.jpg"
        text: "Cześć, mam na imię Saloni. Informatyka służy mi do rozwiązywania problemów w dziedzinie zdrowia i medycyny. Nauczymy się o bloku jeśli-w przeciwnym razie. Ten blok wygląda jak blok jeśli, ale ma dodatkową część w przeciwnym razie na końcu."
      2:
        image: "uwagi/hoc5_2.jpg"
        text: "Jeśli umieszczę blok idź do przodu w miejscu, które mówi wykonaj, i blok skręć w lewo, które mówi jeśli, to oznacza, że zombie będzie miał do wyboru 2 opcje. Jeśli jest droga do przodu, zombie ruszy do przodu, a jeśli nie (nie ma takiej drogi), to zombie skręci w lewo."
      3:
        image: "uwagi/hoc5_3.jpg"
        text: "Podobnie jak blok jeśli, możemy umieścić bloki jeśli-w przeciwnym razie wewnątrz bloków powtórz tak, że zombie będzie się poruszał i blok Jeśli-w przeciwnym razie będzie sprawdzał, czy jest możliwość skręcenia."
      4:
        image: "uwagi/hoc5_4.jpg"
        text: "Zabierz teraz te potwory (zombies), gdzie ich miejsce!"
    function:
      1:
        image: "notes/stage13_1.jpg"
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: "notes/stage13_2.jpg"
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: "notes/stage13_3.jpg"
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: "notes/stage13_4.jpg"
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5 function" block from functions category.
      5:
        image: "notes/stage13_5.jpg"
        text: |-
          Let's put the "fun" back in "FUNction!" 
    loop_while:
      1:
        image: "notes/stage9_5.jpg"
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block." 
      2:
        image: "notes/stage9_6.jpg"
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statment on the top is TRUE.'
      3:
        image: "notes/stage9_7.jpg"
        text: "For example, if the farmer is standing on a pile, she will continue to remove 1 shoveful WHILE there is still a pile beneath her."
    loop_for:
      1:
        image: "notes/stage11_1.jpg"
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: "notes/stage11_2.jpg"
        text: 'This is our new "counter" loop. It will perform actions over and over again and you can make the actions change slightly each time.'
      3:
        image: "notes/stage11_3.jpg"
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: "notes/stage11_4.jpg"
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: "notes/stage15_1.jpg"
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: "notes/stage15_2.jpg"
        text: "What if we want to draw a bunch of triangles and have their lengths be different sizes?"
      3:
        image: "notes/stage15_3.jpg"
        text: "We could write all that code out by hand or we can use a function with parameters."
      4:
        image: "notes/stage15_4.jpg"
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: "notes/stage15_5.jpg"
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: "notes/stage15_6.jpg"
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: "notes/stage15_7.jpg"
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: "notes/stage15_8.jpg"
        text: "Now you can use the math block to input different numbers to draw triangles of different sizes."
    hoc_wrapup:
      1:
        image: "uwagi/hoc6_1.jpg"
        text: "Gratulacje! Z ostatnimi łamigłówkami, które rozwiązałeś, napisałeś kod, który może pomóc jakiemukolwiek robotowi, jak znaleźć drogę przez labirynt bez rozgałęzień lub przez tunel o dowolnej długości, bez względu na to, czy jest to zombie, ptak, pojazd na marsie lub nawet samojezdny samochód."
      2:
        image: "uwagi/hoc6_2.jpg"
        text: "Podstawowe pojęcia, które wykorzystałeś, są sednem każdego programu lub aplikacji, które kiedykolwiek będziesz używał. Dowiedzieliśmy się o powtarzaniu w pętli, instrukcji powtórz aż do, instrukcji jeśli, instrukcji jeśli-w przeciwnym razie."
      3:
        image: "uwagi/hoc6_3.jpg"
        text: "Jeśli podoba Ci się Twoja pierwsza godzina kodowania, odwiedź code.org, aby kontynuować swoją edukację informatyczną! Po zakończeniu naszego 20-godzinnego kursu będziesz mieć opanowane podstawy programowania i będziesz mógł rozpocząć naukę, jak pisać aplikacje dla telefonów komórkowych, instrukcje dla robotów, czy nawet gry."
      4:
        image: "uwagi/hoc6_4.jpg"
        text: "Technologia zmienia wszystko, co robimy, i nie ma znaczenia czy jesteś młody czy stary: programowanie to zabawa, jest kreatywne i każdy może się nauczyć !"
    20_wrapup:
      1:
        image: "notes/bird.png"
        text: "Pokaż uwagi - wkrótce dostępne!"
